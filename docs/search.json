[{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"CLAUDE.md","text":"mapgl R package provides interface Mapbox GL JS MapLibre GL JS creating interactive maps R. designed feel familiar R users making powerful capabilities mapping libraries available.","code":""},{"path":[]},{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":"package-building-and-installation","dir":"","previous_headings":"Common Development Commands","what":"Package Building and Installation","title":"CLAUDE.md","text":"","code":"# Build and install the package locally devtools::install()  # Check the package for issues devtools::check()  # Generate documentation from roxygen2 comments devtools::document()  # Run tests devtools::test()  # Build the package devtools::build()"},{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":"vignette-and-documentation","dir":"","previous_headings":"Common Development Commands","what":"Vignette and Documentation","title":"CLAUDE.md","text":"","code":"# Build all vignettes devtools::build_vignettes()  # Build a specific vignette knitr::knit(\"vignettes/getting-started.Rmd\")  # Build pkgdown site pkgdown::build_site()"},{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":"shiny-development","dir":"","previous_headings":"Common Development Commands","what":"Shiny Development","title":"CLAUDE.md","text":"","code":"# When developing Shiny apps with mapgl, use: shiny::runApp(\"app.R\", reload = TRUE)"},{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":"testing-individual-functions","dir":"","previous_headings":"Common Development Commands","what":"Testing Individual Functions","title":"CLAUDE.md","text":"","code":"# Load the development version devtools::load_all()  # Test individual functions library(mapgl) map <- maplibre() |>   add_circle_layer(data = sf_object, ...)"},{"path":[]},{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":"htmlwidgets-architecture","dir":"","previous_headings":"Architecture and Code Structure","what":"HTMLWidgets Architecture","title":"CLAUDE.md","text":"package uses htmlwidgets framework bridge R JavaScript: mapboxgl.R / maplibre.R: Main widget creation functions layers.R: Functions adding map layers (circles, fills, lines, etc.) sources.R: Functions adding data sources controls.R: Functions adding UI controls shiny.R: Shiny integration proxy functions plugins.R: Integration JS plugins (globe minimap, geocoder, etc.) mapboxgl.js / maplibregl.js: Main JS widget bindings mapboxgl_compare.js / maplibregl_compare.js: Compare view implementations YAML files define dependencies widget MapLibre GL JS (vendored) Mapbox GL JS (loaded CDN) Various plugins (globe-minimap, draw, geocoder, etc.)","code":""},{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":"widget-communication-pattern","dir":"","previous_headings":"Architecture and Code Structure","what":"Widget Communication Pattern","title":"CLAUDE.md","text":"R functions create list structures map instructions serialized JSON sent JavaScript JavaScript interprets instructions updates map Shiny proxy functions send messages existing maps","code":""},{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":"key-design-patterns","dir":"","previous_headings":"Architecture and Code Structure","what":"Key Design Patterns","title":"CLAUDE.md","text":"Layer Management: layer requires source. package automatically creates sources needed: Proxy Pattern: Shiny apps, proxy functions allow updating existing maps: Expression System: package supports Mapbox GL expressions: Control Positioning: Controls can positioned 8 locations: - “top-left”, “top-center”, “top-right” - “bottom-left”, “bottom-center”, “bottom-right” - “middle-left”, “middle-right”","code":"# This creates both a source and a layer add_circle_layer(map, id = \"circles\", source = \"data\", data = sf_object) maplibre_proxy(\"map_id\") |>   set_filter(\"layer_id\", list(\"==\", \"property\", \"value\")) interpolate(   column = \"value\",   values = c(0, 100),   colors = c(\"blue\", \"red\") )"},{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":"dependencies-and-versions","dir":"","previous_headings":"Architecture and Code Structure","what":"Dependencies and Versions","title":"CLAUDE.md","text":"MapLibre GL JS: v5.3.0 (vendored) Mapbox GL JS: v3.12.0 (CDN) R dependencies: htmlwidgets, sf, geojsonsf, shiny, etc.","code":""},{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":"working-with-styles","dir":"","previous_headings":"Architecture and Code Structure","what":"Working with Styles","title":"CLAUDE.md","text":"package supports multiple style sources: - mapbox_style(): Official Mapbox styles (requires token) - maptiler_style(): MapTiler styles (requires API key) - carto_style(): CARTO styles (free) - Custom style URLs JSON objects","code":""},{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":"testing-changes","dir":"","previous_headings":"Architecture and Code Structure","what":"Testing Changes","title":"CLAUDE.md","text":"Test JavaScript changes modifying files inst/htmlwidgets/ Test R changes running devtools::load_all() testing interactively Use examples vignettes/ test cases Test Shiny functionality apps vignettes/ create minimal examples","code":""},{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":"current-issues-and-edge-cases","dir":"","previous_headings":"Architecture and Code Structure","what":"Current Issues and Edge Cases","title":"CLAUDE.md","text":"Globe minimap positioning MapLibre “bottom-right” position CSS issues Compare views require special handling synchronized map updates Mapbox-specific features may work MapLibre vice versa","code":""},{"path":"https://walker-data.com/mapgl/CLAUDE.html","id":"specific-instructions","dir":"","previous_headings":"Architecture and Code Structure","what":"Specific instructions","title":"CLAUDE.md","text":"create examples folder create R script files files within folder getting explicit approval Code style follow Posit’s Air formatter Code style prefers snake case (words separated underscores) rather camel case.","code":""},{"path":"https://walker-data.com/mapgl/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Kyle Walker Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://walker-data.com/mapgl/articles/getting-started.html","id":"using-mapbox-gl-js","dir":"Articles","previous_headings":"","what":"Using Mapbox GL JS","title":"Getting started with mapgl","text":"gateway Mapbox GL JS v3 R mapboxgl() function. Run function arguments get interactive globe using Mapbox’s Standard style: use Mapbox maps, need Mapbox access token. user mapboxapi package installed Mapbox access token, mapboxgl() pick token . new R packages, ’ll want get token Mapbox account, run usethis::edit_r_environ(), set environment variable MAPBOX_PUBLIC_TOKEN=\"your_token_here\". ’s important know Mapbox GL JS commercial product charges map views; however, generous free tier. Mapbox’s default styles accessible mapbox_style() function, can passed style parameter change style map. Mapbox GL JS also supports modifying map projections; use projection = \"winkelTripel\" Winkel Tripel global projection. get local view map, can use center, zoom, pitch, bearing arguments. example shown , arguments incorporated “fly ” animation. mapgl supports several animated transitions. Mapbox GL JS v3, new Standard style includes custom-rendered buildings around world, American Airlines Center Dallas.","code":"library(mapgl)  mapboxgl() mapboxgl(   style = mapbox_style(\"satellite\"),   projection = \"winkelTripel\") mapboxgl(   center = c(-97.6, 25.4) ) |>    fly_to(     center = c(-96.810481, 32.790869),     zoom = 18.4,     pitch = 75,     bearing = 136.8   )"},{"path":"https://walker-data.com/mapgl/articles/getting-started.html","id":"using-maplibre-gl-js","dir":"Articles","previous_headings":"","what":"Using Maplibre GL JS","title":"Getting started with mapgl","text":"Maplibre GL JS, fork permissively-licensed Mapbox GL JS 1.0, also available R users mapgl. core function initialize MapLibre map maplibre(). default tiles maplibre() CARTO’s Voyager tiles, usable without API key. MapTiler tiles also available via maptiler_style() function. styles work quite well MapLibre, require API key; set environment variable MAPTILER_API_KEY .Renviron file store key. example uses Bright MapTiler style, adds fullscreen control navigation control map. controls styles available mapboxgl() well; mapgl aims provide consistent API work either Mapbox MapLibre.","code":"library(mapgl)  maplibre() maplibre(   style = maptiler_style(\"bright\"),   center = c(-43.23412, -22.91370),   zoom = 14 ) |>    add_fullscreen_control(position = \"top-left\") |>    add_navigation_control()"},{"path":"https://walker-data.com/mapgl/articles/getting-started.html","id":"comparing-map-views","dir":"Articles","previous_headings":"","what":"Comparing map views","title":"Getting started with mapgl","text":"mapgl includes function compare() allows users create synced swipe maps can compare two styles. function works either Mapbox MapLibre maps.","code":"m1 <- mapboxgl() m2 <- mapboxgl(mapbox_style(\"satellite-streets\"))  compare(m1, m2)"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"using-layers-an-overview","dir":"Articles","previous_headings":"","what":"Using layers: an overview","title":"Layers overview","text":"Mapbox GL JS MapLibre, datasets added maps sources styled layers. mapgl aims expose sources layers APIs R users ways honor deep customization available JavaScript libraries also accommodate R users’ typical workflows. Geospatial practitioners R typically work objects sf package. initial release mapgl natively supports sf objects, aim support geospatial formats (objects terra package) future. Objects class sf can specified sources map either add_source() function via source parameter one mapgl’s layer functions. add_fill_layer() function calls Mapbox GL JS addLayer() function internally fill type, enumerates available options styling layer function arguments. mapgl users often want use bounds argument initializing map, alternatively fit_bounds() function, fix map view given layer’s bounding box. overview available layers mapgl . Layers can used either mapboxgl() maplibre() maps.","code":"library(mapgl) library(sf)  nc <- st_read(system.file(\"shape/nc.shp\", package=\"sf\")) ## Reading layer `nc' from data source  ##   `/Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/library/sf/shape/nc.shp'  ##   using driver `ESRI Shapefile' ## Simple feature collection with 100 features and 14 fields ## Geometry type: MULTIPOLYGON ## Dimension:     XY ## Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 ## Geodetic CRS:  NAD27 mapboxgl(bounds = nc) |>    add_fill_layer(id = \"nc_data\",                  source = nc,                  fill_color = \"blue\",                  fill_opacity = 0.5)"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"line-layers","dir":"Articles","previous_headings":"","what":"Line layers","title":"Layers overview","text":"","code":"library(mapgl) library(tigris) ## To enable caching of data, set `options(tigris_use_cache = TRUE)` ## in your R script or .Rprofile. options(tigris_use_cache = TRUE)  loving_roads <- roads(\"TX\", \"Loving\")  maplibre(style = maptiler_style(\"backdrop\"),          bounds = loving_roads) |>   add_line_layer(     id = \"roads\",     source = loving_roads,     line_color = \"navy\",     line_opacity = 0.7   )"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"circle-layers","dir":"Articles","previous_headings":"","what":"Circle layers","title":"Layers overview","text":"Circle layers typically used represent point data map. Circle clustering implemented cluster_options argument, list generated cluster_options() function can passed.","code":"library(mapgl) library(sf) library(dplyr)  # Set seed for reproducibility set.seed(1234)  # Define the bounding box for Washington DC (approximately) bbox <- st_bbox(c(   xmin = -77.119759,   ymin = 38.791645,   xmax = -76.909393,   ymax = 38.995548 ), crs = st_crs(4326))  # Generate 30 random points within the bounding box random_points <- st_as_sf(   data.frame(     id = 1:30,     lon = runif(30, bbox[\"xmin\"], bbox[\"xmax\"]),     lat = runif(30, bbox[\"ymin\"], bbox[\"ymax\"])   ),   coords = c(\"lon\", \"lat\"),   crs = 4326 )  # Assign random categories categories <- c('music', 'bar', 'theatre', 'bicycle') random_points <- random_points %>%   mutate(category = sample(categories, n(), replace = TRUE))  # Map with circle layer mapboxgl(style = mapbox_style(\"dark\"),          bounds = random_points) %>%   add_circle_layer(     id = \"poi-layer\",     source = random_points,     circle_color = match_expr(       \"category\",       values = c(\"music\", \"bar\", \"theatre\",                  \"bicycle\"),       stops = c(\"#1f78b4\", \"#33a02c\",                 \"#e31a1c\", \"#ff7f00\")     ),     circle_radius = 8,     circle_stroke_color = \"#ffffff\",     circle_stroke_width = 2,     circle_opacity = 0.8,     tooltip = \"category\",     hover_options = list(circle_radius = 12,                          circle_color = \"#ffff99\")   ) %>%   add_categorical_legend(     legend_title = \"Points of Interest\",     values = c(\"Music\", \"Bar\", \"Theatre\", \"Bicycle\"),     colors = c(\"#1f78b4\", \"#33a02c\", \"#e31a1c\", \"#ff7f00\"),     circular_patches = TRUE   )"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"symbol-layers","dir":"Articles","previous_headings":"","what":"Symbol layers","title":"Layers overview","text":"Symbol layers offer wide range arguments customizing icon label appearance; however arguments work icons. icon_image argument look string represents icon found map style’s sprite. Read sprites .","code":"mapboxgl(style = mapbox_style(\"light\"),          bounds = random_points) |>   add_symbol_layer(     id = \"points-of-interest\",     source = random_points,     icon_image = get_column(\"category\"),     icon_allow_overlap = TRUE,     tooltip = \"category\"   )"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"heatmap-layers","dir":"Articles","previous_headings":"","what":"Heatmap layers","title":"Layers overview","text":"Heatmap layers take object geometry type POINT visualize density points visually attractive way. add_heatmap_layer() takes sf POINT objects; example shows read remote GeoJSON file source well.","code":"library(mapgl)  mapboxgl(style = mapbox_style(\"dark\"),          center = c(-120, 50),          zoom = 2) |>   add_heatmap_layer(     id = \"earthquakes-heat\",     source = list(       type = \"geojson\",       data = \"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\"     ),     heatmap_weight = interpolate(       column = \"mag\",       values = c(0, 6),       stops = c(0, 1)     ),     heatmap_intensity = interpolate(       property = \"zoom\",       values = c(0, 9),       stops = c(1, 3)     ),     heatmap_color = interpolate(       property = \"heatmap-density\",       values = seq(0, 1, 0.2),       stops = c('rgba(33,102,172,0)', 'rgb(103,169,207)',                 'rgb(209,229,240)', 'rgb(253,219,199)',                 'rgb(239,138,98)', 'rgb(178,24,43)')     ),     heatmap_opacity = 0.7   )"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"fill-extrusion-layers","dir":"Articles","previous_headings":"","what":"Fill-extrusion layers","title":"Layers overview","text":"","code":"library(mapgl)  maplibre(   style = maptiler_style(\"basic\"),   center = c(-74.0066, 40.7135),   zoom = 15.5,   pitch = 45,   bearing = -17.6 ) |>   add_vector_source(     id = \"openmaptiles\",     url = paste0(\"https://api.maptiler.com/tiles/v3/tiles.json?key=\",                  Sys.getenv(\"MAPTILER_API_KEY\"))   ) |>   add_fill_extrusion_layer(     id = \"3d-buildings\",     source = 'openmaptiles',     source_layer = 'building',     fill_extrusion_color = interpolate(       column = 'render_height',       values = c(0, 200, 400),       stops = c('lightgray', 'royalblue', 'lightblue')     ),     fill_extrusion_height = list(       'interpolate',       list('linear'),       list('zoom'),       15,       0,       16,       list('get', 'render_height')     )   )"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"raster-layers","dir":"Articles","previous_headings":"","what":"Raster layers","title":"Layers overview","text":"mapgl supports rasters terra package passed data argument add_image_source() function, visualized add_raster_layer(). Remote raster sources (shown ) can also added add_image_source() remotely-hosted image files, add_raster_source() remotely-hosted raster tiles.","code":"mapboxgl(style = mapbox_style(\"dark\"),          zoom = 5,          center = c(-75.789, 41.874)) |>   add_image_source(     id = \"radar\",     url = \"https://docs.mapbox.com/mapbox-gl-js/assets/radar.gif\",     coordinates = list(       c(-80.425, 46.437),       c(-71.516, 46.437),       c(-71.516, 37.936),       c(-80.425, 37.936)     )   ) |>   add_raster_layer(     id = 'radar-layer',     source = 'radar',     raster_fade_duration = 0   )"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"markers","dir":"Articles","previous_headings":"","what":"Markers","title":"Layers overview","text":"Markers represent unique visual component Mapbox GL JS MapLibre GL JS, highlight locations count map layers. mapgl, users can add markers using add_markers() function. single marker can added length-2 vector longitude latitude; list length-2 vectors sf POINT object add multiple markers.","code":"mapboxgl(   style = mapbox_style(\"streets\"),   center = c(-74.006, 40.7128),   zoom = 10 ) |>  add_markers(   c(-74.006, 40.7128),   color = \"blue\",   rotation = 45,   popup = \"A marker\" )"},{"path":"https://walker-data.com/mapgl/articles/map-design.html","id":"continuous-styling","dir":"Articles","previous_headings":"","what":"Continuous styling","title":"Fundamentals of map design with mapgl","text":"Styling Mapbox GL JS Maplibre GL JS typically handled expressions. Expressions allow quite bit customization map-makers, can feel clunky R users. mapgl includes several functions help R users translate code expressions use data visualizations. interpolate() function create interpolate expression, smoothly transitions values series stops. means can natively create just color palette want map palette seamlessly data. , specify two values - 20 80 - map colors “lightblue” “darkblue” values. Mapbox GL JS smoothly interpolate colors light blue dark blue map data values found specified column. add_legend() function adds legend map. mapgl’s initial release, add_legend() automatically populate values style. gives users much flexibility format legend, though users also need take care ensure legend appropriately represents data. Future updates package may include functionality automated legends.","code":"fl_map |>    add_fill_layer(   id = \"fl_tracts\",   source = fl_age,   fill_color = interpolate(     column = \"estimate\",     values = c(20, 80),     stops = c(\"lightblue\", \"darkblue\"),     na_color = \"lightgrey\"   ),   fill_opacity = 0.5  ) |>    add_legend(     \"Median age in Florida\",     values = c(20, 80),     colors = c(\"lightblue\", \"darkblue\")   )"},{"path":"https://walker-data.com/mapgl/articles/map-design.html","id":"categorical-styling","dir":"Articles","previous_headings":"","what":"Categorical styling","title":"Fundamentals of map design with mapgl","text":"Cartographers may prefer binned method visualizing data rather continuous palette shown . Mapbox GL JS MapLibre, binned maps can created step expression. step_expr() function helps R users assemble expression. Step expressions may feel little unfamiliar R users, require base value followed series stops. example , generate five-color palette ColorBrewer. first color used base, four colors stops. values specify bin edges.","code":"brewer_pal <- RColorBrewer::brewer.pal(5, \"RdYlBu\")  fl_map |>    add_fill_layer(   id = \"fl_tracts\",   source = fl_age,   fill_color = step_expr(     column = \"estimate\",     base = brewer_pal[1],     stops = brewer_pal[2:5],     values = seq(25, 70, 15),     na_color = \"white\"   ),   fill_opacity = 0.5  ) |>    add_legend(     \"Median age in Florida\",     values = c(       \"Under 25\",       \"25-40\",       \"40-55\",       \"55-70\",       \"Above 70\"     ),     colors = brewer_pal,     type = \"categorical\"   )"},{"path":"https://walker-data.com/mapgl/articles/map-design.html","id":"pop-ups-tooltips-and-highlighting","dir":"Articles","previous_headings":"","what":"Pop-ups, tooltips, and highlighting","title":"Fundamentals of map design with mapgl","text":"Mapmakers often want expose additional interactivity users form -click popups, hover tooltips, hover effects. native JavaScript, can tricky set requires knowledge events, queries, feature states libraries. mapgl wraps functionality make features accessible R users. popup tooltip arguments take string input representing name column display click hover. arguments accommodate HTML, best way set create column values display popup tooltip, use column adding layer. Hover effects can set hover_options argument. argument takes list key-value pairs keys arguments given layer type (case, fill layer) arguments desired values hover. example shown , tell Mapbox GL JS change Census tract’s fill yellow fill opacity 1 users hovers tract.","code":"fl_age$popup <- glue::glue(   \"<strong>GEOID: <\/strong>{fl_age$GEOID}<br><strong>Median age: <\/strong>{fl_age$estimate}\" )  fl_map |>    add_fill_layer(   id = \"fl_tracts\",   source = fl_age,   fill_color = interpolate(     column = \"estimate\",     values = c(20, 80),     stops = c(\"lightblue\", \"darkblue\"),     na_color = \"lightgrey\"   ),   fill_opacity = 0.5,   popup = \"popup\",   tooltip = \"estimate\",   hover_options = list(     fill_color = \"yellow\",     fill_opacity = 1   )  ) |>    add_legend(     \"Median age in Florida\",     values = c(20, 80),     colors = c(\"lightblue\", \"darkblue\")   )"},{"path":"https://walker-data.com/mapgl/articles/shiny.html","id":"map-inputs","dir":"Articles","previous_headings":"","what":"Map inputs","title":"Using mapgl with Shiny","text":"number map events built-working mapgl Shiny session exposed user inputs. include: input$MAPID_center: center coordinates map (named lng lat); input$MAPID_zoom: current zoom level map; input$MAPID_bbox: bounding box visible extent map, named xmin, xmax, ymin, ymax. input$MAPID_click: longitude latitude click, named lng lat, timestamp click, named time. Visible features map can also queried clicked. Clicking map Shiny returns input$MAPID_feature_click, gets layer ID, column values clicked feature (accessible properties), well coordinates time click. Try example see works:","code":"ui <- page_sidebar(   title = \"mapgl with Shiny\",   sidebar = sidebar(     verbatimTextOutput(\"clicked_feature\")   ),   card(     full_screen = TRUE,     maplibreOutput(\"map\")   ) )  server <- function(input, output, session) {   output$map <- renderMaplibre({     maplibre(style = carto_style(\"positron\")) |>        fit_bounds(nc, animate = FALSE) |>        add_fill_layer(id = \"nc_data\",                      source = nc,                      fill_color = \"blue\",                      fill_opacity = 0.5)   })      output$clicked_feature <- renderPrint({     req(input$map_feature_click)     input$map_feature_click   }) }  shinyApp(ui, server)"},{"path":"https://walker-data.com/mapgl/articles/shiny.html","id":"shiny-specific-functions","dir":"Articles","previous_headings":"","what":"Shiny-specific functions","title":"Using mapgl with Shiny","text":"mapgl includes number functions help interact maps data Shiny session, likely add future. include: set_style(), modify underlying style (basemap) map; set_layout_property(), modify layout property map (whether layer displayed); set_paint_property(), modify styling layer; set_filter(), dynamically filters displayed data layer based input value. ’ll need build filter expressionto achieve ; using list() R translate square brackets JavaScript. plans make easier users future. ’ll use functions combination proxy object, familiar users coming Leaflet R mapping packages. map proxy preserves existing state map, allows edit components without re-drawing entire map app. ’ll use mapboxgl_proxy() Mapbox maps, maplibre_proxy() MapLibre maps. Try example uses color picker widget change color map, slider filter visible counties based expression.","code":"library(colourpicker)  ui <- page_sidebar(   title = \"mapgl with Shiny\",   sidebar = sidebar(     colourInput(\"color\", \"Select a color\",                 value = \"blue\"),     sliderInput(\"slider\", \"Show BIR74 values above:\",                 value = 248, min = 248, max = 21588)   ),   card(     full_screen = TRUE,     maplibreOutput(\"map\")   ) )  server <- function(input, output, session) {   output$map <- renderMaplibre({     maplibre(style = carto_style(\"positron\")) |>        fit_bounds(nc, animate = FALSE) |>        add_fill_layer(id = \"nc_data\",                      source = nc,                      fill_color = \"blue\",                      fill_opacity = 0.5)   })      observeEvent(input$color, {     maplibre_proxy(\"map\") |>       set_paint_property(\"nc_data\", \"fill-color\", input$color)   })      observeEvent(input$slider, {     maplibre_proxy(\"map\") |>        set_filter(\"nc_data\",                   list(\">=\", get_column(\"BIR74\"), input$slider))   }) }  shinyApp(ui, server)"},{"path":"https://walker-data.com/mapgl/articles/shiny.html","id":"comparison-maps-in-shiny","dir":"Articles","previous_headings":"","what":"Comparison maps in Shiny","title":"Using mapgl with Shiny","text":"way side--side maps generated compare() function work mapgl, comparison maps require rendering functions. Mapbox maps, can use mapboxglCompareOutput(), renderMapboxglCompare(); mapboxgl_compare_proxy(); MapLibre, use maplibreCompareOutput(); renderMaplibreCompare(); maplibre_compare_proxy(). compare proxies, can target side map want modify argument map_side = \"\" (left top) map_side = \"\" (right bottom).","code":""},{"path":"https://walker-data.com/mapgl/articles/story-maps.html","id":"moving-the-map-on-scroll","dir":"Articles","previous_headings":"","what":"Moving the map on scroll","title":"Building story maps with mapgl","text":"Let’s take look works basic example. ’ll build story map two sections: introductory section, second section map “flies ” location user scrolls. get started, let’s build basic user interface without map actions. ui, set story_map() inside fluid page two sections. server, ’ll create Mapbox globe mapboxgl() renderMapboxgl(). cases ’ll want set option scrollZoom = FALSE initialize map map scrolling behavior doesn’t interfere story scrolling.  ’ll note scrolling transition story sections, can still interact map clicking panning. However, haven’t set actions server, nothing else happens scroll sections. can change using on_section() function. on_section(), ’ll specify map ID (case, \"map\") section ID link action; section ID name corresponding list element defined list passed sections UI. ’ll define expression, much like observeEvent() Shiny, executed given section appears.  map zooms Colosseum Rome user scroll. scroll back top, however, ’ll notice view return original globe. can remedied tying on_section() event introductory section.  map transitions, addition fly_to(), might consider using ease_to() jump_to() depending use case. Map transition functions support camera options animation options keyword arguments applicable.","code":"library(shiny) library(mapgl)  ui <- fluidPage(   story_map(     map_id = \"map\",     sections = list(       \"intro\" = story_section(         \"Introduction\",         \"This is a story map.\"       ),       \"location\" = story_section(         \"Location\",         \"Check out this interesting location.\"       )     )   ) )  server <- function(input, output, session) {   output$map <- renderMapboxgl({     mapboxgl(scrollZoom = FALSE)   }) }  shinyApp(ui, server) library(shiny) library(mapgl)  ui <- fluidPage(   story_map(     map_id = \"map\",     sections = list(       \"intro\" = story_section(         \"Introduction\",         \"This is a story map.\"       ),       \"location\" = story_section(         \"Location\",         \"Check out this interesting location.\"       )     )   ) )  server <- function(input, output, session) {   output$map <- renderMapboxgl({     mapboxgl(scrollZoom = FALSE)   })      on_section(\"map\", \"location\", {     mapboxgl_proxy(\"map\") |>        fly_to(center = c(12.49257, 41.890233),               zoom = 17.5,              pitch = 49,              bearing = 12.8)   })    }  shinyApp(ui, server) library(shiny) library(mapgl)  ui <- fluidPage(   story_map(     map_id = \"map\",     sections = list(       \"intro\" = story_section(         \"Introduction\",         \"This is a story map.\"       ),       \"location\" = story_section(         \"Location\",         \"Check out this interesting location.\"       )     )   ) )  server <- function(input, output, session) {   output$map <- renderMapboxgl({     mapboxgl(scrollZoom = FALSE)   })      on_section(\"map\", \"intro\", {     mapboxgl_proxy(\"map\") |>        fly_to(center = c(0, 0),              zoom = 0,              pitch = 0,              bearing = 0)   })      on_section(\"map\", \"location\", {     mapboxgl_proxy(\"map\") |>        fly_to(center = c(12.49257, 41.890233),               zoom = 17.5,              pitch = 49,              bearing = 12.8)   })    }  shinyApp(ui, server)"},{"path":"https://walker-data.com/mapgl/articles/story-maps.html","id":"adding-data-and-modifying-story-appearance","dir":"Articles","previous_headings":"","what":"Adding data and modifying story appearance","title":"Building story maps with mapgl","text":"many cases, ’ll want use story maps visualize data ’ll add Mapbox / MapLibre basemap. Let’s build example real estate firm might use story map market property.  Let’s break key elements story map. ’re loading Google font, “Poppins”, Shiny app tags$link(). allows us use Poppins font globally story_map() passing argument font_family. appearance panels can also modified section--section prefer. story section panel, passing list HTML items content. introductory section shows include local image (www folder local app); can also reference remotely-hosted images include HTML elements supported Shiny. Also note position = \"center\" argument position introductory panel center screen; \"left\" default, \"right\" also supported without need additional CSS customization. first example, story actions defined calls on_section() operate Mapbox GL proxy object, \"map\". example, use add_markers() add marker location, add_fill_layer() add 20-minute drivetime isochrone created Mapbox API. Transitions views handled fly_to() fit_bounds(), clear_layer() clear_markers() calls used control data layers visible user goes forward backward story.","code":"library(shiny) library(mapgl) library(mapboxapi)  property <- c(-97.71326, 30.402550) isochrone <- mb_isochrone(property, profile = \"driving\", time = 20)  ui <- fluidPage(   tags$link(href = \"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap\", rel=\"stylesheet\"),   story_map(     map_id = \"map\",     font_family = \"Poppins\",     sections = list(       \"intro\" = story_section(         title = \"MULTIFAMILY INVESTMENT OPPORTUNITY\",         content = list(           p(\"New Class A Apartments in Austin, Texas\"),           img(src = \"apartment.png\", width = \"300px\")         ),         position = \"center\"       ),       \"marker\" = story_section(         title = \"PROPERTY LOCATION\",         content = list(           p(\"The property will be located in the thriving Domain district of north Austin, home to some of the city's best shopping, dining, and entertainment.\")         )       ),       \"isochrone\" = story_section(         title = \"AUSTIN AT YOUR FINGERTIPS\",         content = list(           p(\"The property is within a 20-minute drive of downtown Austin, the University of Texas, and the city's major employers.\")         )       )     )   ) )  server <- function(input, output, session) {   output$map <- renderMapboxgl({     mapboxgl(scrollZoom = FALSE,              center = c(-97.7301093, 30.288647),              zoom = 12)   })    on_section(\"map\", \"intro\", {     mapboxgl_proxy(\"map\") |>       clear_markers() |>       fly_to(center = c(-97.7301093, 30.288647),              zoom = 12,              pitch = 0,              bearing = 0)    })    on_section(\"map\", \"marker\", {     mapboxgl_proxy(\"map\") |>       clear_layer(\"isochrone\") |>       add_markers(data = property, color = \"#CC5500\") |>       fly_to(center = property,              zoom = 16,              pitch = 45,              bearing = -90)   })    on_section(\"map\", \"isochrone\", {     mapboxgl_proxy(\"map\") |>       add_fill_layer(         id = \"isochrone\",         source = isochrone,         fill_color = \"#CC5500\",         fill_opacity = 0.5       ) |>       fit_bounds(         isochrone,         animate = TRUE,         duration = 8000,         pitch = 75       )   })  }  shinyApp(ui, server)"},{"path":"https://walker-data.com/mapgl/articles/story-maps.html","id":"integrating-shiny-inputs-and-outputs","dir":"Articles","previous_headings":"","what":"Integrating Shiny inputs and outputs","title":"Building story maps with mapgl","text":"story map feature mapgl built unique way accommodate map-based scrollytelling, still creating R Shiny app. means Shiny’s functionality interactivity available build story maps. list items pass content given story section panel can include Shiny inputs well Shiny outputs can correspond content visible story maps. Let’s set scenario adds interactivity data displayed Fundamentals map design mapgl vignette. ’ll make map median age Florida, display introductory story panel. user selects county display; scroll, story zoom selected county show histogram values Census tracts county.  Let’s walk works. UI code familiar, though now using MapLibre backend story_maplibre(). main difference inclusion Shiny selectInput() first story panel two Shiny outputs second story panel. ’ve set , users can select county beginning story, get different output scroll . reactive object sel_county() used get county-specific values second story panel, help us determine map’s extent want zoom selected county. said, don’t use sel_county() directly map. Instead, use mapgl’s set_filter() function, performant filtering data clearing layer re-adding . allows us invoke underlying setFilter() JavaScript method (see documentation) operate directly map layer . Setting filter NULL clears filter gives us back entire state Florida. note content second panel entirely Shiny outputs: h2 header corresponds selected county, histogram median age values Census tracts county drawn ggplot2.","code":"library(shiny) library(mapgl) library(tidycensus) library(tidyverse) library(sf)  fl_age <- get_acs(   geography = \"tract\",   variables = \"B01002_001\",   state = \"FL\",   year = 2023,   geometry = TRUE ) |>   separate_wider_delim(NAME, delim = \"; \", names = c(\"tract\", \"county\", \"state\")) %>%   st_sf()  ui <- fluidPage(   story_maplibre(     map_id = \"map\",     sections = list(       \"intro\" = story_section(         \"Median Age in Florida\",         content = list(           selectInput(             \"county\",             \"Select a county\",             choices = sort(unique(fl_age$county))           ),           p(\"Scroll down to view the median age distribution in the selected county.\")         )       ),       \"county\" = story_section(         title = NULL,         content = list(           uiOutput(\"county_text\"),           plotOutput(\"county_plot\")         )       )     )   ) )  server <- function(input, output, session) {    sel_county <- reactive({     filter(fl_age, county == input$county)   })    output$map <- renderMaplibre({     maplibre(       carto_style(\"positron\"),       bounds = fl_age,       scrollZoom = FALSE     ) |>       add_fill_layer(         id = \"fl_tracts\",         source = fl_age,         fill_color = interpolate(           column = \"estimate\",           values = c(20, 80),           stops = c(\"lightblue\", \"darkblue\"),           na_color = \"lightgrey\"         ),         fill_opacity = 0.5       ) |>       add_legend(         \"Median age in Florida\",         values = c(20, 80),         colors = c(\"lightblue\", \"darkblue\"),         position = \"bottom-right\"       )   })    output$county_text <- renderUI({     h2(toupper(input$county))   })    output$county_plot <- renderPlot({     ggplot(sel_county(), aes(x = estimate)) +       geom_histogram(fill = \"lightblue\", color = \"black\", bins = 10) +       theme_minimal() +       labs(x = \"Median Age\", y = \"\")   })    on_section(\"map\", \"intro\", {     maplibre_proxy(\"map\") |>       set_filter(\"fl_tracts\", NULL) |>       fit_bounds(fl_age, animate = TRUE)   })    on_section(\"map\", \"county\", {     maplibre_proxy(\"map\") |>       set_filter(\"fl_tracts\", filter = list(\"==\", \"county\", input$county)) |>       fit_bounds(sel_county(), animate = TRUE)   })  }  shinyApp(ui, server)"},{"path":"https://walker-data.com/mapgl/articles/story-maps.html","id":"sharing-your-stories-next-steps","dir":"Articles","previous_headings":"","what":"Sharing your stories / next steps","title":"Building story maps with mapgl","text":"story map Shiny app, ’ll need publish Shiny server share . Posit’s ShinyApps.io Connect Cloud products nice options don’t want set Shiny server. building story maps mapgl, please let know ! ’m also planning trainings / workshops feature, please reach interested.","code":""},{"path":"https://walker-data.com/mapgl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kyle Walker. Author, maintainer.","code":""},{"path":"https://walker-data.com/mapgl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Walker K (2025). mapgl: Interactive Maps 'Mapbox GL JS' 'MapLibre GL JS'. R package version 0.2.2.9000, https://walker-data.com/mapgl/.","code":"@Manual{,   title = {mapgl: Interactive Maps with 'Mapbox GL JS' and 'MapLibre GL JS'},   author = {Kyle Walker},   year = {2025},   note = {R package version 0.2.2.9000},   url = {https://walker-data.com/mapgl/}, }"},{"path":"https://walker-data.com/mapgl/index.html","id":"mapgl-","dir":"","previous_headings":"","what":"mapgl: WebGL Maps in R with Mapbox and MapLibre","title":"mapgl: WebGL Maps in R with Mapbox and MapLibre","text":"mapgl R package makes latest versions Mapbox GL JS MapLibre GL JS available R users. package interface designed make powerful capabilities libraries available R mapping projects, also feel similar users coming R mapping packages. Install CRAN: , install development version GitHub: Read vignettes learn use package: Getting started mapgl Using layers: overview Fundamentals map design mapgl Using mapgl Shiny Building story maps mapgl","code":"install.packages(\"mapgl\") remotes::install_github(\"walkerke/mapgl\")"},{"path":"https://walker-data.com/mapgl/index.html","id":"recommended-training-and-how-to-learn-more","dir":"","previous_headings":"","what":"Recommended training and how to learn more","title":"mapgl: WebGL Maps in R with Mapbox and MapLibre","text":"find project useful work like ensure continued development package, can provide support following ways: Purchase official mapgl workshop series, hosted mapgl’s author, Kyle Walker; Chip funds support package development via PayPal; Set consulting engagement workshop though Walker Data help implement mapgl project. Send note kyle@walker-data.com interested; File issue - even better, pull request - https://github.com/walkerke/mapgl/issues. stay top package updates / new features get information mapgl trainings, sure sign Walker Data mailing list .","code":""},{"path":"https://walker-data.com/mapgl/reference/add_categorical_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a categorical legend to a Mapbox GL map — add_categorical_legend","title":"Add a categorical legend to a Mapbox GL map — add_categorical_legend","text":"function adds categorical legend Mapbox GL map. supports customizable colors, sizes, shapes legend items.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_categorical_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a categorical legend to a Mapbox GL map — add_categorical_legend","text":"","code":"add_categorical_legend(   map,   legend_title,   values,   colors,   circular_patches = FALSE,   position = \"top-left\",   unique_id = NULL,   sizes = NULL,   add = FALSE,   width = NULL,   layer_id = NULL,   margin_top = NULL,   margin_right = NULL,   margin_bottom = NULL,   margin_left = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_categorical_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a categorical legend to a Mapbox GL map — add_categorical_legend","text":"map map object created mapboxgl function. legend_title title legend. values vector categories values displayed legend. colors corresponding colors values. Can vector colors single color. circular_patches Logical, whether use circular patches legend. Default FALSE. position position legend map. One \"top-left\", \"bottom-left\", \"top-right\", \"bottom-right\". Default \"top-left\". unique_id unique ID legend container. NULL, random ID generated. sizes optional numeric vector sizes legend patches, single numeric value. provided vector, length values. circular_patches FALSE (square patches), sizes represent width height patch pixels.  circular_patches TRUE, sizes represent radius circle. add Logical, whether add legend existing legends (TRUE) replace existing legends (FALSE). Default FALSE. width width legend. Can specified pixels (e.g., \"250px\") \"auto\". Default NULL, uses built-default. layer_id ID layer legend associated . provided, legend shown/hidden layer visibility toggled. margin_top Custom top margin pixels, allowing fine control legend positioning. Default NULL (uses standard positioning). margin_right Custom right margin pixels. Default NULL. margin_bottom Custom bottom margin pixels. Default NULL. margin_left Custom left margin pixels. Default NULL.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_categorical_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a categorical legend to a Mapbox GL map — add_categorical_legend","text":"updated map object legend added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_categorical_legend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a categorical legend to a Mapbox GL map — add_categorical_legend","text":"","code":"if (FALSE) { # \\dontrun{ library(mapboxgl) map <- mapboxgl(     center = c(-96, 37.8),     zoom = 3 ) map %>% add_categorical_legend(     legend_title = \"Population\",     values = c(\"Low\", \"Medium\", \"High\"),     colors = c(\"#FED976\", \"#FEB24C\", \"#FD8D3C\"),     circular_patches = TRUE,     sizes = c(10, 15, 20),     width = \"300px\" ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_circle_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a circle layer to a Mapbox GL map — add_circle_layer","title":"Add a circle layer to a Mapbox GL map — add_circle_layer","text":"Add circle layer Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_circle_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a circle layer to a Mapbox GL map — add_circle_layer","text":"","code":"add_circle_layer(   map,   id,   source,   source_layer = NULL,   circle_blur = NULL,   circle_color = NULL,   circle_opacity = NULL,   circle_radius = NULL,   circle_sort_key = NULL,   circle_stroke_color = NULL,   circle_stroke_opacity = NULL,   circle_stroke_width = NULL,   circle_translate = NULL,   circle_translate_anchor = \"map\",   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   popup = NULL,   tooltip = NULL,   hover_options = NULL,   before_id = NULL,   filter = NULL,   cluster_options = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_circle_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a circle layer to a Mapbox GL map — add_circle_layer","text":"map map object created mapboxgl function. id unique ID layer. source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). circle_blur Amount blur circle. circle_color color circle. circle_opacity opacity circle drawn. circle_radius Circle radius. circle_sort_key Sorts features ascending order based value. circle_stroke_color color circle's stroke. circle_stroke_opacity opacity circle's stroke. circle_stroke_width width circle's stroke. circle_translate geometry's offset. Values c(x, y) negatives indicate left . circle_translate_anchor Controls frame reference circle-translate. visibility Whether layer displayed. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. popup column name containing information display popup click.  Columns containing HTML parsed. tooltip column name containing information display tooltip hover. Columns containing HTML parsed. hover_options named list options highlighting features layer hover. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels). filter optional filter expression subset features layer. cluster_options list options clustering circles, created cluster_options() function.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_circle_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a circle layer to a Mapbox GL map — add_circle_layer","text":"modified map object new circle layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_circle_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a circle layer to a Mapbox GL map — add_circle_layer","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl) library(sf) library(dplyr)  # Set seed for reproducibility set.seed(1234)  # Define the bounding box for Washington DC (approximately) bbox <- st_bbox(     c(         xmin = -77.119759,         ymin = 38.791645,         xmax = -76.909393,         ymax = 38.995548     ),     crs = st_crs(4326) )  # Generate 30 random points within the bounding box random_points <- st_as_sf(     data.frame(         id = 1:30,         lon = runif(30, bbox[\"xmin\"], bbox[\"xmax\"]),         lat = runif(30, bbox[\"ymin\"], bbox[\"ymax\"])     ),     coords = c(\"lon\", \"lat\"),     crs = 4326 )  # Assign random categories categories <- c(\"music\", \"bar\", \"theatre\", \"bicycle\") random_points <- random_points %>%     mutate(category = sample(categories, n(), replace = TRUE))  # Map with circle layer mapboxgl(style = mapbox_style(\"light\")) %>%     fit_bounds(random_points, animate = FALSE) %>%     add_circle_layer(         id = \"poi-layer\",         source = random_points,         circle_color = match_expr(             \"category\",             values = c(                 \"music\", \"bar\", \"theatre\",                 \"bicycle\"             ),             stops = c(                 \"#1f78b4\", \"#33a02c\",                 \"#e31a1c\", \"#ff7f00\"             )         ),         circle_radius = 8,         circle_stroke_color = \"#ffffff\",         circle_stroke_width = 2,         circle_opacity = 0.8,         tooltip = \"category\",         hover_options = list(             circle_radius = 12,             circle_color = \"#ffff99\"         )     ) %>%     add_categorical_legend(         legend_title = \"Points of Interest\",         values = c(\"Music\", \"Bar\", \"Theatre\", \"Bicycle\"),         colors = c(\"#1f78b4\", \"#33a02c\", \"#e31a1c\", \"#ff7f00\"),         circular_patches = TRUE     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_continuous_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a continuous legend — add_continuous_legend","title":"Add a continuous legend — add_continuous_legend","text":"Add continuous legend","code":""},{"path":"https://walker-data.com/mapgl/reference/add_continuous_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a continuous legend — add_continuous_legend","text":"","code":"add_continuous_legend(   map,   legend_title,   values,   colors,   position = \"top-left\",   unique_id = NULL,   add = FALSE,   width = NULL,   layer_id = NULL,   margin_top = NULL,   margin_right = NULL,   margin_bottom = NULL,   margin_left = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_continuous_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a continuous legend — add_continuous_legend","text":"map map object created mapboxgl function. legend_title title legend. values values represented map (vector stops). colors colors used generate color ramp. position position legend map (one \"top-left\", \"bottom-left\", \"top-right\", \"bottom-right\"). unique_id unique ID legend container. Defaults NULL. add Logical, whether add legend existing legends (TRUE) replace existing legends (FALSE). Default FALSE. width width legend. Can specified pixels (e.g., \"250px\") \"auto\". Default NULL, uses built-default. layer_id ID layer legend associated . provided, legend shown/hidden layer visibility toggled. margin_top Custom top margin pixels, allowing fine control legend positioning. Default NULL (uses standard positioning). margin_right Custom right margin pixels. Default NULL. margin_bottom Custom bottom margin pixels. Default NULL. margin_left Custom left margin pixels. Default NULL.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_continuous_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a continuous legend — add_continuous_legend","text":"updated map object legend added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a custom control to a map — add_control","title":"Add a custom control to a map — add_control","text":"function adds custom control Mapbox GL MapLibre GL map. allows create custom HTML element controls add map.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a custom control to a map — add_control","text":"","code":"add_control(map, html, position = \"top-right\", className = NULL, ...)"},{"path":"https://walker-data.com/mapgl/reference/add_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a custom control to a map — add_control","text":"map map object created mapboxgl maplibre functions. html Character string containing HTML content control. position position control. Can one \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\". Default \"top-right\". className Optional CSS class name control container. ... Additional arguments passed JavaScript side.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a custom control to a map — add_control","text":"modified map object custom control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a custom control to a map — add_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  maplibre() |>   add_control(     html = \"<div style='background-color: white; padding: 5px;'>              <p>Custom HTML<\/p>              <img src='path/to/image.png' alt='image'/>             <\/div>\",     position = \"top-left\"   ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_draw_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a draw control to a map — add_draw_control","title":"Add a draw control to a map — add_draw_control","text":"Add draw control map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_draw_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a draw control to a map — add_draw_control","text":"","code":"add_draw_control(   map,   position = \"top-left\",   freehand = FALSE,   simplify_freehand = FALSE,   orientation = \"vertical\",   source = NULL,   point_color = \"#3bb2d0\",   line_color = \"#3bb2d0\",   fill_color = \"#3bb2d0\",   fill_opacity = 0.1,   active_color = \"#fbb03b\",   vertex_radius = 5,   line_width = 2,   ... )"},{"path":"https://walker-data.com/mapgl/reference/add_draw_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a draw control to a map — add_draw_control","text":"map map object created mapboxgl maplibre functions. position string specifying position draw control. One \"top-right\", \"top-left\", \"bottom-right\", \"bottom-left\". freehand Logical, whether enable freehand drawing mode. Default FALSE. simplify_freehand Logical, whether apply simplification freehand drawings. Default FALSE. orientation string specifying orientation draw control. Either \"vertical\" (default) \"horizontal\". source character string specifying source ID add draw control. Default NULL. point_color Color point features. Default \"#3bb2d0\" (light blue). line_color Color line features. Default \"#3bb2d0\" (light blue). fill_color Fill color polygon features. Default \"#3bb2d0\" (light blue). fill_opacity Fill opacity polygon features. Default 0.1. active_color Color active (selected) features. Default \"#fbb03b\" (orange). vertex_radius Radius vertex points pixels. Default 5. line_width Width lines pixels. Default 2. ... Additional named arguments. See https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#options list options.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_draw_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a draw control to a map — add_draw_control","text":"modified map object draw control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_draw_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a draw control to a map — add_draw_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl(     style = mapbox_style(\"streets\"),     center = c(-74.50, 40),     zoom = 9 ) |>     add_draw_control()      # With initial features from a source library(tigris) tx <- counties(state = \"TX\", cb = TRUE) mapboxgl(bounds = tx) |>     add_source(id = \"tx\", data = tx) |>     add_draw_control(source = \"tx\")      # With custom styling mapboxgl() |>     add_draw_control(         point_color = \"#ff0000\",         line_color = \"#00ff00\",          fill_color = \"#0000ff\",         fill_opacity = 0.3,         active_color = \"#ff00ff\",         vertex_radius = 7,         line_width = 3     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_features_to_draw.html","id":null,"dir":"Reference","previous_headings":"","what":"Add features to an existing draw control — add_features_to_draw","title":"Add features to an existing draw control — add_features_to_draw","text":"function adds features existing source draw control map.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_features_to_draw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add features to an existing draw control — add_features_to_draw","text":"","code":"add_features_to_draw(map, source, clear_existing = FALSE)"},{"path":"https://walker-data.com/mapgl/reference/add_features_to_draw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add features to an existing draw control — add_features_to_draw","text":"map map object draw control already added source Character string specifying source ID get features clear_existing Logical, whether clear existing drawn features adding new ones. Default FALSE.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_features_to_draw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add features to an existing draw control — add_features_to_draw","text":"modified map object","code":""},{"path":"https://walker-data.com/mapgl/reference/add_features_to_draw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add features to an existing draw control — add_features_to_draw","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl) library(tigris)  # Add features from an existing source tx <- counties(state = \"TX\", cb = TRUE) mapboxgl(bounds = tx) |>   add_source(id = \"tx\", data = tx) |>   add_draw_control() |>   add_features_to_draw(source = \"tx\")    # In a Shiny app observeEvent(input$load_data, {   mapboxgl_proxy(\"map\") |>     add_features_to_draw(       source = \"dynamic_data\",       clear_existing = TRUE     ) }) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_fill_extrusion_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a fill-extrusion layer to a Mapbox GL map — add_fill_extrusion_layer","title":"Add a fill-extrusion layer to a Mapbox GL map — add_fill_extrusion_layer","text":"Add fill-extrusion layer Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fill_extrusion_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a fill-extrusion layer to a Mapbox GL map — add_fill_extrusion_layer","text":"","code":"add_fill_extrusion_layer(   map,   id,   source,   source_layer = NULL,   fill_extrusion_base = NULL,   fill_extrusion_color = NULL,   fill_extrusion_height = NULL,   fill_extrusion_opacity = NULL,   fill_extrusion_pattern = NULL,   fill_extrusion_translate = NULL,   fill_extrusion_translate_anchor = \"map\",   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   popup = NULL,   tooltip = NULL,   hover_options = NULL,   before_id = NULL,   filter = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_fill_extrusion_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a fill-extrusion layer to a Mapbox GL map — add_fill_extrusion_layer","text":"map map object created mapboxgl function. id unique ID layer. source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). fill_extrusion_base base height fill extrusion. fill_extrusion_color color fill extrusion. fill_extrusion_height height fill extrusion. fill_extrusion_opacity opacity fill extrusion. fill_extrusion_pattern Name image sprite use drawing image fills. fill_extrusion_translate geometry's offset. Values c(x, y) negatives indicate left . fill_extrusion_translate_anchor Controls frame reference fill-extrusion-translate. visibility Whether layer displayed. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. popup column name containing information display popup click.  Columns containing HTML parsed. tooltip column name containing information display tooltip hover. Columns containing HTML parsed. hover_options named list options highlighting features layer hover. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels). filter optional filter expression subset features layer.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fill_extrusion_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a fill-extrusion layer to a Mapbox GL map — add_fill_extrusion_layer","text":"modified map object new fill-extrusion layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fill_extrusion_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a fill-extrusion layer to a Mapbox GL map — add_fill_extrusion_layer","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  maplibre(     style = maptiler_style(\"basic\"),     center = c(-74.0066, 40.7135),     zoom = 15.5,     pitch = 45,     bearing = -17.6 ) |>     add_vector_source(         id = \"openmaptiles\",         url = paste0(             \"https://api.maptiler.com/tiles/v3/tiles.json?key=\",             Sys.getenv(\"MAPTILER_API_KEY\")         )     ) |>     add_fill_extrusion_layer(         id = \"3d-buildings\",         source = \"openmaptiles\",         source_layer = \"building\",         fill_extrusion_color = interpolate(             column = \"render_height\",             values = c(0, 200, 400),             stops = c(\"lightgray\", \"royalblue\", \"lightblue\")         ),         fill_extrusion_height = list(             \"interpolate\",             list(\"linear\"),             list(\"zoom\"),             15,             0,             16,             list(\"get\", \"render_height\")         )     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_fill_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a fill layer to a map — add_fill_layer","title":"Add a fill layer to a map — add_fill_layer","text":"Add fill layer map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fill_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a fill layer to a map — add_fill_layer","text":"","code":"add_fill_layer(   map,   id,   source,   source_layer = NULL,   fill_antialias = TRUE,   fill_color = NULL,   fill_emissive_strength = NULL,   fill_opacity = NULL,   fill_outline_color = NULL,   fill_pattern = NULL,   fill_sort_key = NULL,   fill_translate = NULL,   fill_translate_anchor = \"map\",   fill_z_offset = NULL,   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   popup = NULL,   tooltip = NULL,   hover_options = NULL,   before_id = NULL,   filter = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_fill_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a fill layer to a map — add_fill_layer","text":"map map object created mapboxgl maplibre functions. id unique ID layer. source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). fill_antialias Whether fill antialiased. fill_color color filled part layer. fill_emissive_strength Controls intensity light emitted source features. fill_opacity opacity entire fill layer. fill_outline_color outline color fill. fill_pattern Name image sprite use drawing image fills. fill_sort_key Sorts features ascending order based value. fill_translate geometry's offset. Values c(x, y) negatives indicate left . fill_translate_anchor Controls frame reference fill-translate. fill_z_offset Specifies uniform elevation meters. visibility Whether layer displayed. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. popup column name containing information display popup click.  Columns containing HTML parsed. tooltip column name containing information display tooltip hover. Columns containing HTML parsed. hover_options named list options highlighting features layer hover. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels). filter optional filter expression subset features layer.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fill_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a fill layer to a map — add_fill_layer","text":"modified map object new fill layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fill_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a fill layer to a map — add_fill_layer","text":"","code":"if (FALSE) { # \\dontrun{ library(tidycensus)  fl_age <- get_acs(     geography = \"tract\",     variables = \"B01002_001\",     state = \"FL\",     year = 2022,     geometry = TRUE )  mapboxgl() |>     fit_bounds(fl_age, animate = FALSE) |>     add_fill_layer(         id = \"fl_tracts\",         source = fl_age,         fill_color = interpolate(             column = \"estimate\",             values = c(20, 80),             stops = c(\"lightblue\", \"darkblue\"),             na_color = \"lightgrey\"         ),         fill_opacity = 0.5     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_fullscreen_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a fullscreen control to a map — add_fullscreen_control","title":"Add a fullscreen control to a map — add_fullscreen_control","text":"Add fullscreen control map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fullscreen_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a fullscreen control to a map — add_fullscreen_control","text":"","code":"add_fullscreen_control(map, position = \"top-right\")"},{"path":"https://walker-data.com/mapgl/reference/add_fullscreen_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a fullscreen control to a map — add_fullscreen_control","text":"map map object created mapboxgl maplibre functions. position string specifying position fullscreen control. One \"top-right\", \"top-left\", \"bottom-right\", \"bottom-left\".","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fullscreen_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a fullscreen control to a map — add_fullscreen_control","text":"modified map object fullscreen control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fullscreen_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a fullscreen control to a map — add_fullscreen_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  maplibre(     style = maptiler_style(\"streets\"),     center = c(11.255, 43.77),     zoom = 13 ) |>     add_fullscreen_control(position = \"top-right\") } # }"},{"path":"https://walker-data.com/mapgl/reference/add_geocoder_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a geocoder control to a map — add_geocoder_control","title":"Add a geocoder control to a map — add_geocoder_control","text":"function adds Geocoder search bar Mapbox GL MapLibre GL map. default, marker added selected location map fly location.  results geocode accessible Shiny session input$MAPID_geocoder$result, MAPID name map.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_geocoder_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a geocoder control to a map — add_geocoder_control","text":"","code":"add_geocoder_control(   map,   position = \"top-right\",   placeholder = \"Search\",   collapsed = FALSE,   ... )"},{"path":"https://walker-data.com/mapgl/reference/add_geocoder_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a geocoder control to a map — add_geocoder_control","text":"map map object created mapboxgl maplibre function. position position control. Can one \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\". Default \"top-right\". placeholder string use placeholder text search bar. Default \"Search\". collapsed Whether control collapsed hovered clicked. Default FALSE. ... Additional parameters pass Geocoder.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_geocoder_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a geocoder control to a map — add_geocoder_control","text":"modified map object geocoder control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_geocoder_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a geocoder control to a map — add_geocoder_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl() |>     add_geocoder_control(position = \"top-left\", placeholder = \"Enter an address\")  maplibre() |>     add_geocoder_control(position = \"top-right\", placeholder = \"Search location\") } # }"},{"path":"https://walker-data.com/mapgl/reference/add_geolocate_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a geolocate control to a map — add_geolocate_control","title":"Add a geolocate control to a map — add_geolocate_control","text":"function adds Geolocate control Mapbox GL MapLibre GL map. geolocate control allows users track current location map.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_geolocate_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a geolocate control to a map — add_geolocate_control","text":"","code":"add_geolocate_control(   map,   position = \"top-right\",   track_user = FALSE,   show_accuracy_circle = TRUE,   show_user_location = TRUE,   show_user_heading = FALSE,   fit_bounds_options = list(maxZoom = 15),   position_options = list(enableHighAccuracy = FALSE, timeout = 6000) )"},{"path":"https://walker-data.com/mapgl/reference/add_geolocate_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a geolocate control to a map — add_geolocate_control","text":"map map object created mapboxgl maplibre functions. position position control. Can one \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\". Default \"top-right\". track_user Whether actively track user's location. TRUE, map continuously update user moves. Default FALSE. show_accuracy_circle Whether show circle indicating accuracy location. Default TRUE. show_user_location Whether show dot user's location. Default TRUE. show_user_heading Whether show arrow indicating device's heading tracking location. works track_user TRUE. Default FALSE. fit_bounds_options list options fitting bounds panning user's location. Default maxZoom 15. position_options list Geolocation API position options. Default enableHighAccuracy=FALSE timeout=6000.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_geolocate_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a geolocate control to a map — add_geolocate_control","text":"modified map object geolocate control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_geolocate_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a geolocate control to a map — add_geolocate_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl() |>     add_geolocate_control(         position = \"top-right\",         track_user = TRUE,         show_user_heading = TRUE     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_globe_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a globe control to a map — add_globe_control","title":"Add a globe control to a map — add_globe_control","text":"function adds globe control MapLibre GL map allows toggling \"mercator\" \"globe\" projections single click.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_globe_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a globe control to a map — add_globe_control","text":"","code":"add_globe_control(map, position = \"top-right\")"},{"path":"https://walker-data.com/mapgl/reference/add_globe_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a globe control to a map — add_globe_control","text":"map map object created maplibre function. position position control. Can one \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\". Default \"top-right\".","code":""},{"path":"https://walker-data.com/mapgl/reference/add_globe_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a globe control to a map — add_globe_control","text":"modified map object globe control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_globe_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a globe control to a map — add_globe_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  maplibre() |>     add_globe_control(position = \"top-right\") } # }"},{"path":"https://walker-data.com/mapgl/reference/add_globe_minimap.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Globe Minimap to a map — add_globe_minimap","title":"Add a Globe Minimap to a map — add_globe_minimap","text":"function adds globe minimap control Mapbox GL Maplibre map.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_globe_minimap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Globe Minimap to a map — add_globe_minimap","text":"","code":"add_globe_minimap(   map,   position = \"bottom-right\",   globe_size = 82,   land_color = \"white\",   water_color = \"rgba(30 40 70/60%)\",   marker_color = \"#ff2233\",   marker_size = 1 )"},{"path":"https://walker-data.com/mapgl/reference/add_globe_minimap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Globe Minimap to a map — add_globe_minimap","text":"map mapboxgl maplibre object. position string specifying position minimap. globe_size Number pixels diameter globe. Default 82. land_color HTML color use land areas globe. Default 'white'. water_color HTML color use water areas globe. Default 'rgba(30 40 70/60%)'. marker_color HTML color use center point marker. Default '#ff2233'. marker_size Scale ratio center point marker. Default 1.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_globe_minimap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Globe Minimap to a map — add_globe_minimap","text":"modified map object globe minimap added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_globe_minimap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Globe Minimap to a map — add_globe_minimap","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  m <- mapboxgl() %>%     add_globe_minimap()  m <- maplibre() %>%     add_globe_minimap() } # }"},{"path":"https://walker-data.com/mapgl/reference/add_h3j_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a hexagon source from the H3 geospatial indexing system. — add_h3j_source","title":"Add a hexagon source from the H3 geospatial indexing system. — add_h3j_source","text":"Add hexagon source H3 geospatial indexing system.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_h3j_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a hexagon source from the H3 geospatial indexing system. — add_h3j_source","text":"","code":"add_h3j_source(map, id, url)"},{"path":"https://walker-data.com/mapgl/reference/add_h3j_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a hexagon source from the H3 geospatial indexing system. — add_h3j_source","text":"map map object created mapboxgl maplibre function. id unique ID source. url URL pointing vector tile source.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_h3j_source.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add a hexagon source from the H3 geospatial indexing system. — add_h3j_source","text":"https://h3geo.org, https://github.com/INSPIDE/h3j-h3t","code":""},{"path":"https://walker-data.com/mapgl/reference/add_h3j_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a hexagon source from the H3 geospatial indexing system. — add_h3j_source","text":"","code":"if (FALSE) { # interactive() url = \"https://inspide.github.io/h3j-h3t/examples/h3j/sample.h3j\" maplibre(center=c(-3.704, 40.417), zoom=15, pitch=30) |>   add_h3j_source(\"h3j_testsource\",                   url = url   )  |>   add_fill_extrusion_layer(     id = \"h3j_testlayer\",     source = \"h3j_testsource\",     fill_extrusion_color = interpolate(       column = \"value\",       values = c(0, 21.864),       stops = c(\"#430254\", \"#f83c70\")     ),     fill_extrusion_height = list(       \"interpolate\",       list(\"linear\"),       list(\"zoom\"),       14,       0,       15.05,       list(\"*\", 10, list(\"get\", \"value\"))     ),     fill_extrusion_opacity = 0.7   ) }"},{"path":"https://walker-data.com/mapgl/reference/add_heatmap_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a heatmap layer to a Mapbox GL map — add_heatmap_layer","title":"Add a heatmap layer to a Mapbox GL map — add_heatmap_layer","text":"Add heatmap layer Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_heatmap_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a heatmap layer to a Mapbox GL map — add_heatmap_layer","text":"","code":"add_heatmap_layer(   map,   id,   source,   source_layer = NULL,   heatmap_color = NULL,   heatmap_intensity = NULL,   heatmap_opacity = NULL,   heatmap_radius = NULL,   heatmap_weight = NULL,   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   before_id = NULL,   filter = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_heatmap_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a heatmap layer to a Mapbox GL map — add_heatmap_layer","text":"map map object created mapboxgl function. id unique ID layer. source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). heatmap_color color heatmap points. heatmap_intensity intensity heatmap points. heatmap_opacity opacity heatmap layer. heatmap_radius radius influence individual heatmap point. heatmap_weight weight individual heatmap point. visibility Whether layer displayed. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels). filter optional filter expression subset features layer.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_heatmap_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a heatmap layer to a Mapbox GL map — add_heatmap_layer","text":"modified map object new heatmap layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_heatmap_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a heatmap layer to a Mapbox GL map — add_heatmap_layer","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl(     style = mapbox_style(\"dark\"),     center = c(-120, 50),     zoom = 2 ) |>     add_heatmap_layer(         id = \"earthquakes-heat\",         source = list(             type = \"geojson\",             data = \"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\"         ),         heatmap_weight = interpolate(             column = \"mag\",             values = c(0, 6),             stops = c(0, 1)         ),         heatmap_intensity = interpolate(             property = \"zoom\",             values = c(0, 9),             stops = c(1, 3)         ),         heatmap_color = interpolate(             property = \"heatmap-density\",             values = seq(0, 1, 0.2),             stops = c(                 \"rgba(33,102,172,0)\", \"rgb(103,169,207)\",                 \"rgb(209,229,240)\", \"rgb(253,219,199)\",                 \"rgb(239,138,98)\", \"rgb(178,24,43)\"             )         ),         heatmap_opacity = 0.7     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an image to the map — add_image","title":"Add an image to the map — add_image","text":"function adds image map's style. image can used icon-image, background-pattern, fill-pattern, line-pattern.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an image to the map — add_image","text":"","code":"add_image(   map,   id,   url,   content = NULL,   pixel_ratio = 1,   sdf = FALSE,   stretch_x = NULL,   stretch_y = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an image to the map — add_image","text":"map map object created mapboxgl maplibre functions. id string specifying ID image. url string specifying URL image loaded path local image file. Must PNG JPEG format. content vector four numbers c(x1, y1, x2, y2) defining part image can covered content text-field icon-text-fit used. pixel_ratio number specifying ratio pixels image physical pixels screen. sdf logical value indicating whether image interpreted SDF image. stretch_x list number pairs defining part(s) image can stretched horizontally. stretch_y list number pairs defining part(s) image can stretched vertically.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an image to the map — add_image","text":"modified map object image added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an image to the map — add_image","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  # Path to your local image file OR a URL to a remote image file # that is not blocked by CORS restrictions image_path <- \"/path/to/your/image.png\"  pts <- tigris::landmarks(\"DE\")[1:100, ]  maplibre(bounds = pts) |>     add_image(\"local_icon\", image_path) |>     add_symbol_layer(         id = \"local_icons\",         source = pts,         icon_image = \"local_icon\",         icon_size = 0.5,         icon_allow_overlap = TRUE     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_image_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an image source to a Mapbox GL or Maplibre GL map — add_image_source","title":"Add an image source to a Mapbox GL or Maplibre GL map — add_image_source","text":"Add image source Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_image_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an image source to a Mapbox GL or Maplibre GL map — add_image_source","text":"","code":"add_image_source(   map,   id,   url = NULL,   data = NULL,   coordinates = NULL,   colors = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_image_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an image source to a Mapbox GL or Maplibre GL map — add_image_source","text":"map map object created mapboxgl maplibre function. id unique ID source. url URL pointing image source. data SpatRaster object terra package RasterLayer object. coordinates list coordinates specifying image corners clockwise order: top left, top right, bottom right, bottom left.  SpatRaster RasterLayer objects, extracted . colors vector colors use raster image.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_image_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an image source to a Mapbox GL or Maplibre GL map — add_image_source","text":"modified map object new source added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a layer to a map from a source — add_layer","title":"Add a layer to a map from a source — add_layer","text":"many cases, use add_layer() internal layer-specific functions mapgl. Advanced users want use add_layer() fine-grained control appearance layers.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a layer to a map from a source — add_layer","text":"","code":"add_layer(   map,   id,   type = \"fill\",   source,   source_layer = NULL,   paint = list(),   layout = list(),   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   popup = NULL,   tooltip = NULL,   hover_options = NULL,   before_id = NULL,   filter = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a layer to a map from a source — add_layer","text":"map map object created mapboxgl() maplibre() functions. id unique ID layer. type type layer (e.g., \"fill\", \"line\", \"circle\"). source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). paint list paint properties layer. layout list layout properties layer. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. popup column name containing information display popup click.  Columns containing HTML parsed. tooltip column name containing information display tooltip hover. Columns containing HTML parsed. hover_options named list options highlighting features layer hover. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels). filter optional filter expression subset features layer.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a layer to a map from a source — add_layer","text":"modified map object new layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a layer to a map from a source — add_layer","text":"","code":"if (FALSE) { # \\dontrun{ # Load necessary libraries library(mapgl) library(tigris)  # Load geojson data for North Carolina tracts nc_tracts <- tracts(state = \"NC\", cb = TRUE)  # Create a Mapbox GL map map <- mapboxgl(     style = mapbox_style(\"light\"),     center = c(-79.0193, 35.7596),     zoom = 7 )  # Add a source and fill layer for North Carolina tracts map %>%     add_source(         id = \"nc-tracts\",         data = nc_tracts     ) %>%     add_layer(         id = \"nc-layer\",         type = \"fill\",         source = \"nc-tracts\",         paint = list(             \"fill-color\" = \"#888888\",             \"fill-opacity\" = 0.4         )     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_layers_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a layers control to the map — add_layers_control","title":"Add a layers control to the map — add_layers_control","text":"Add layers control map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layers_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a layers control to the map — add_layers_control","text":"","code":"add_layers_control(   map,   position = \"top-left\",   layers = NULL,   collapsible = TRUE,   use_icon = TRUE,   background_color = NULL,   active_color = NULL,   hover_color = NULL,   active_text_color = NULL,   inactive_text_color = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_layers_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a layers control to the map — add_layers_control","text":"map map object. position position control map (one \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\"). layers vector layer IDs included control. NULL, layers included. collapsible Whether control collapsible. use_icon Whether use stacked layers icon instead \"Layers\" text collapsed. applies collapsible = TRUE. background_color background color layers control; color used inactive layer items. active_color background color active layer items. hover_color background color layer items hovered. active_text_color text color active layer items. inactive_text_color text color inactive layer items.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layers_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a layers control to the map — add_layers_control","text":"modified map object layers control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layers_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a layers control to the map — add_layers_control","text":"","code":"if (FALSE) { # \\dontrun{ library(tigris) options(tigris_use_cache = TRUE)  rds <- roads(\"TX\", \"Tarrant\") tr <- tracts(\"TX\", \"Tarrant\", cb = TRUE)  maplibre() |>     fit_bounds(rds) |>     add_fill_layer(         id = \"Census tracts\",         source = tr,         fill_color = \"purple\",         fill_opacity = 0.6     ) |>     add_line_layer(         \"Local roads\",         source = rds,         line_color = \"pink\"     ) |>     add_layers_control(         position = \"top-left\",         background_color = \"#ffffff\",         active_color = \"#4a90e2\"     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a legend to a Mapbox GL map — add_legend","title":"Add a legend to a Mapbox GL map — add_legend","text":"Add legend Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a legend to a Mapbox GL map — add_legend","text":"","code":"add_legend(   map,   legend_title,   values,   colors,   type = c(\"continuous\", \"categorical\"),   circular_patches = FALSE,   position = \"top-left\",   sizes = NULL,   add = FALSE,   unique_id = NULL,   width = NULL,   layer_id = NULL,   margin_top = NULL,   margin_right = NULL,   margin_bottom = NULL,   margin_left = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a legend to a Mapbox GL map — add_legend","text":"map map object created mapboxgl function. legend_title title legend. values values represented map (either vector categories vector stops). colors corresponding colors values (either vector colors, single color, interpolate function). type One \"continuous\" \"categorical\". circular_patches Logical, whether use circular patches legend (categorical legends). position position legend map (one \"top-left\", \"bottom-left\", \"top-right\", \"bottom-right\"). sizes optional numeric vector sizes legend patches, single numeric value (categorical legends). add Logical, whether add legend existing legends (TRUE) replace existing legends (FALSE). Default FALSE. unique_id Optional. unique identifier legend. provided, random ID generated. width width legend. Can specified pixels (e.g., \"250px\") \"auto\". Default NULL, uses built-default. layer_id ID layer legend associated . provided, legend shown/hidden layer visibility toggled. margin_top Custom top margin pixels, allowing fine control legend positioning. Default NULL (uses standard positioning). margin_right Custom right margin pixels. Default NULL. margin_bottom Custom bottom margin pixels. Default NULL. margin_left Custom left margin pixels. Default NULL.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a legend to a Mapbox GL map — add_legend","text":"updated map object legend added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_line_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a line layer to a map — add_line_layer","title":"Add a line layer to a map — add_line_layer","text":"Add line layer map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_line_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a line layer to a map — add_line_layer","text":"","code":"add_line_layer(   map,   id,   source,   source_layer = NULL,   line_blur = NULL,   line_cap = NULL,   line_color = NULL,   line_dasharray = NULL,   line_emissive_strength = NULL,   line_gap_width = NULL,   line_gradient = NULL,   line_join = NULL,   line_miter_limit = NULL,   line_occlusion_opacity = NULL,   line_offset = NULL,   line_opacity = NULL,   line_pattern = NULL,   line_round_limit = NULL,   line_sort_key = NULL,   line_translate = NULL,   line_translate_anchor = \"map\",   line_trim_color = NULL,   line_trim_fade_range = NULL,   line_trim_offset = NULL,   line_width = NULL,   line_z_offset = NULL,   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   popup = NULL,   tooltip = NULL,   hover_options = NULL,   before_id = NULL,   filter = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_line_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a line layer to a map — add_line_layer","text":"map map object created mapboxgl maplibre functions. id unique ID layer. source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). line_blur Amount blur line, pixels. line_cap display line endings. One \"butt\", \"round\", \"square\". line_color color line drawn. line_dasharray Specifies lengths alternating dashes gaps form dash pattern. line_emissive_strength Controls intensity light emitted source features. line_gap_width Draws line casing outside line's actual path. Value indicates width inner gap. line_gradient gradient used color line feature various distances along length. line_join display lines joining. line_miter_limit Used automatically convert miter joins bevel joins sharp angles. line_occlusion_opacity Opacity multiplier line part occluded 3D objects. line_offset line's offset. line_opacity opacity line drawn. line_pattern Name image sprite use drawing image lines. line_round_limit Used automatically convert round joins miter joins shallow angles. line_sort_key Sorts features ascending order based value. line_translate geometry's offset. Values c(x, y) negatives indicate left , respectively. line_translate_anchor Controls frame reference line-translate. line_trim_color color used rendering trimmed line section. line_trim_fade_range fade range trim-start trim-end points. line_trim_offset line part c(trim_start, trim_end) painted using line_trim_color. line_width Stroke thickness. line_z_offset Vertical offset ground, meters. visibility Whether layer displayed. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. popup column name containing information display popup click. Columns containing HTML parsed. tooltip column name containing information display tooltip hover. Columns containing HTML parsed. hover_options named list options highlighting features layer hover. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels) filter optional filter expression subset features layer.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_line_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a line layer to a map — add_line_layer","text":"modified map object new line layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_line_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a line layer to a map — add_line_layer","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl) library(tigris)  loving_roads <- roads(\"TX\", \"Loving\")  maplibre(style = maptiler_style(\"backdrop\")) |>     fit_bounds(loving_roads) |>     add_line_layer(         id = \"tracks\",         source = loving_roads,         line_color = \"navy\",         line_opacity = 0.7     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Add markers to a Mapbox GL or Maplibre GL map — add_markers","title":"Add markers to a Mapbox GL or Maplibre GL map — add_markers","text":"Add markers Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add markers to a Mapbox GL or Maplibre GL map — add_markers","text":"","code":"add_markers(   map,   data,   color = \"red\",   rotation = 0,   popup = NULL,   marker_id = NULL,   draggable = FALSE,   ... )"},{"path":"https://walker-data.com/mapgl/reference/add_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add markers to a Mapbox GL or Maplibre GL map — add_markers","text":"map map object created mapboxgl maplibre functions. data length-2 numeric vector coordinates, list length-2 numeric vectors, sf POINT object. color color marker (default \"red\"). rotation rotation marker (default 0). popup column name popups (data sf object) string single popup (data numeric vector list vectors). marker_id unique ID marker. lists, names inherited list names.  sf objects, column name. draggable boolean indicating marker draggable (default FALSE). ... Additional options passed marker.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add markers to a Mapbox GL or Maplibre GL map — add_markers","text":"modified map object markers added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_markers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add markers to a Mapbox GL or Maplibre GL map — add_markers","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl) library(sf)  # Create a map object map <- mapboxgl(   style = mapbox_style(\"streets\"),   center = c(-74.006, 40.7128),   zoom = 10 )  # Add a single draggable marker with an ID map <- add_markers(   map,   c(-74.006, 40.7128),   color = \"blue\",   rotation = 45,   popup = \"A marker\",   draggable = TRUE,   marker_id = \"marker1\" )  # Add multiple markers from a named list of coordinates coords_list <- list(marker2 = c(-74.006, 40.7128),                     marker3 = c(-73.935242, 40.730610)) map <- add_markers(   map,   coords_list,   color = \"green\",   popup = \"Multiple markers\",   draggable = TRUE )  # Create an sf POINT object points_sf <- st_as_sf(data.frame(   id = c(\"marker4\", \"marker5\"),   lon = c(-74.006, -73.935242),   lat = c(40.7128, 40.730610) ), coords = c(\"lon\", \"lat\"), crs = 4326) points_sf$popup <- c(\"Point 1\", \"Point 2\")  # Add multiple markers from an sf object with IDs from a column map <- add_markers(   map,   points_sf,   color = \"red\",   popup = \"popup\",   draggable = TRUE,   marker_id = \"id\" ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_navigation_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a navigation control to a map — add_navigation_control","title":"Add a navigation control to a map — add_navigation_control","text":"Add navigation control map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_navigation_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a navigation control to a map — add_navigation_control","text":"","code":"add_navigation_control(   map,   show_compass = TRUE,   show_zoom = TRUE,   visualize_pitch = FALSE,   position = \"top-right\",   orientation = \"vertical\" )"},{"path":"https://walker-data.com/mapgl/reference/add_navigation_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a navigation control to a map — add_navigation_control","text":"map map object created mapboxgl maplibre functions. show_compass Whether show compass button. show_zoom Whether show zoom-zoom-buttons. visualize_pitch Whether visualize pitch rotating X-axis compass. position position map control added. Possible values \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\". orientation orientation navigation control. Can \"vertical\" (default) \"horizontal\".","code":""},{"path":"https://walker-data.com/mapgl/reference/add_navigation_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a navigation control to a map — add_navigation_control","text":"updated map object navigation control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_navigation_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a navigation control to a map — add_navigation_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl() |>     add_navigation_control(visualize_pitch = TRUE) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_raster_dem_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a raster DEM source to a Mapbox GL or Maplibre GL map — add_raster_dem_source","title":"Add a raster DEM source to a Mapbox GL or Maplibre GL map — add_raster_dem_source","text":"Add raster DEM source Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_dem_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a raster DEM source to a Mapbox GL or Maplibre GL map — add_raster_dem_source","text":"","code":"add_raster_dem_source(map, id, url, tileSize = 512, maxzoom = NULL)"},{"path":"https://walker-data.com/mapgl/reference/add_raster_dem_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a raster DEM source to a Mapbox GL or Maplibre GL map — add_raster_dem_source","text":"map map object created mapboxgl maplibre function. id unique ID source. url URL pointing raster DEM source. tileSize size raster tiles. maxzoom maximum zoom level raster tiles.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_dem_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a raster DEM source to a Mapbox GL or Maplibre GL map — add_raster_dem_source","text":"modified map object new source added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a raster layer to a Mapbox GL map — add_raster_layer","title":"Add a raster layer to a Mapbox GL map — add_raster_layer","text":"Add raster layer Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a raster layer to a Mapbox GL map — add_raster_layer","text":"","code":"add_raster_layer(   map,   id,   source,   source_layer = NULL,   raster_brightness_max = NULL,   raster_brightness_min = NULL,   raster_contrast = NULL,   raster_fade_duration = NULL,   raster_hue_rotate = NULL,   raster_opacity = NULL,   raster_resampling = NULL,   raster_saturation = NULL,   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   before_id = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_raster_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a raster layer to a Mapbox GL map — add_raster_layer","text":"map map object created mapboxgl function. id unique ID layer. source ID source. source_layer source layer (vector sources). raster_brightness_max maximum brightness image. raster_brightness_min minimum brightness image. raster_contrast Increase reduce brightness image. raster_fade_duration duration fade-/fade-effect. raster_hue_rotate Rotates hues around color wheel. raster_opacity opacity raster drawn. raster_resampling resampling/interpolation method use overscaling. raster_saturation Increase reduce saturation image. visibility Whether layer displayed. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels).","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a raster layer to a Mapbox GL map — add_raster_layer","text":"modified map object new raster layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a raster layer to a Mapbox GL map — add_raster_layer","text":"","code":"if (FALSE) { # \\dontrun{ mapboxgl(     style = mapbox_style(\"dark\"),     zoom = 5,     center = c(-75.789, 41.874) ) |>     add_image_source(         id = \"radar\",         url = \"https://docs.mapbox.com/mapbox-gl-js/assets/radar.gif\",         coordinates = list(             c(-80.425, 46.437),             c(-71.516, 46.437),             c(-71.516, 37.936),             c(-80.425, 37.936)         )     ) |>     add_raster_layer(         id = \"radar-layer\",         source = \"radar\",         raster_fade_duration = 0     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_raster_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a raster tile source to a Mapbox GL or Maplibre GL map — add_raster_source","title":"Add a raster tile source to a Mapbox GL or Maplibre GL map — add_raster_source","text":"Add raster tile source Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a raster tile source to a Mapbox GL or Maplibre GL map — add_raster_source","text":"","code":"add_raster_source(   map,   id,   url = NULL,   tiles = NULL,   tileSize = 256,   maxzoom = 22 )"},{"path":"https://walker-data.com/mapgl/reference/add_raster_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a raster tile source to a Mapbox GL or Maplibre GL map — add_raster_source","text":"map map object created mapboxgl maplibre function. id unique ID source. url URL pointing raster tile source. (optional) tiles vector tile URLs raster source. (optional) tileSize size raster tiles. maxzoom maximum zoom level raster tiles.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a raster tile source to a Mapbox GL or Maplibre GL map — add_raster_source","text":"modified map object new source added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_reset_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a reset control to a map — add_reset_control","title":"Add a reset control to a map — add_reset_control","text":"function adds reset control Mapbox GL MapLibre GL map. reset control allows users return original zoom level center.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_reset_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a reset control to a map — add_reset_control","text":"","code":"add_reset_control(map, position = \"top-right\", animate = TRUE, duration = NULL)"},{"path":"https://walker-data.com/mapgl/reference/add_reset_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a reset control to a map — add_reset_control","text":"map map object created mapboxgl maplibre functions. position position control. Can one \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\". Default \"top-right\". animate Whether animate transition original map view; defaults TRUE.  FALSE, view \"jump\" original view transition. duration length transition current view original view, specified milliseconds.  argument works animate TRUE.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_reset_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a reset control to a map — add_reset_control","text":"modified map object reset control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_reset_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a reset control to a map — add_reset_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl() |>     add_reset_control(position = \"top-left\") } # }"},{"path":"https://walker-data.com/mapgl/reference/add_scale_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a scale control to a map — add_scale_control","title":"Add a scale control to a map — add_scale_control","text":"function adds scale control Mapbox GL Maplibre GL map.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_scale_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a scale control to a map — add_scale_control","text":"","code":"add_scale_control(   map,   position = \"bottom-left\",   unit = \"metric\",   max_width = 100 )"},{"path":"https://walker-data.com/mapgl/reference/add_scale_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a scale control to a map — add_scale_control","text":"map map object created mapboxgl maplibre functions. position position control. Can one \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\". Default \"bottom-left\". unit unit scale. Can either \"imperial\", \"metric\", \"nautical\". Default \"metric\". max_width maximum length scale control pixels. Default 100.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_scale_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a scale control to a map — add_scale_control","text":"modified map object scale control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_scale_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a scale control to a map — add_scale_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl() |>     add_scale_control(position = \"bottom-right\", unit = \"imperial\") } # }"},{"path":"https://walker-data.com/mapgl/reference/add_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a GeoJSON or sf source to a Mapbox GL or Maplibre GL map — add_source","title":"Add a GeoJSON or sf source to a Mapbox GL or Maplibre GL map — add_source","text":"Add GeoJSON sf source Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a GeoJSON or sf source to a Mapbox GL or Maplibre GL map — add_source","text":"","code":"add_source(map, id, data, ...)"},{"path":"https://walker-data.com/mapgl/reference/add_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a GeoJSON or sf source to a Mapbox GL or Maplibre GL map — add_source","text":"map map object created mapboxgl maplibre function. id unique ID source. data sf object URL pointing remote GeoJSON file. ... Additional arguments passed JavaScript addSource method.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a GeoJSON or sf source to a Mapbox GL or Maplibre GL map — add_source","text":"modified map object new source added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_symbol_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a symbol layer to a map — add_symbol_layer","title":"Add a symbol layer to a map — add_symbol_layer","text":"Add symbol layer map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_symbol_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a symbol layer to a map — add_symbol_layer","text":"","code":"add_symbol_layer(   map,   id,   source,   source_layer = NULL,   icon_allow_overlap = NULL,   icon_anchor = NULL,   icon_color = NULL,   icon_color_brightness_max = NULL,   icon_color_brightness_min = NULL,   icon_color_contrast = NULL,   icon_color_saturation = NULL,   icon_emissive_strength = NULL,   icon_halo_blur = NULL,   icon_halo_color = NULL,   icon_halo_width = NULL,   icon_ignore_placement = NULL,   icon_image = NULL,   icon_image_cross_fade = NULL,   icon_keep_upright = NULL,   icon_offset = NULL,   icon_opacity = NULL,   icon_optional = NULL,   icon_padding = NULL,   icon_pitch_alignment = NULL,   icon_rotate = NULL,   icon_rotation_alignment = NULL,   icon_size = NULL,   icon_text_fit = NULL,   icon_text_fit_padding = NULL,   icon_translate = NULL,   icon_translate_anchor = NULL,   symbol_avoid_edges = NULL,   symbol_placement = NULL,   symbol_sort_key = NULL,   symbol_spacing = NULL,   symbol_z_elevate = NULL,   symbol_z_offset = NULL,   symbol_z_order = NULL,   text_allow_overlap = NULL,   text_anchor = NULL,   text_color = \"black\",   text_emissive_strength = NULL,   text_field = NULL,   text_font = NULL,   text_halo_blur = NULL,   text_halo_color = NULL,   text_halo_width = NULL,   text_ignore_placement = NULL,   text_justify = NULL,   text_keep_upright = NULL,   text_letter_spacing = NULL,   text_line_height = NULL,   text_max_angle = NULL,   text_max_width = NULL,   text_offset = NULL,   text_opacity = NULL,   text_optional = NULL,   text_padding = NULL,   text_pitch_alignment = NULL,   text_radial_offset = NULL,   text_rotate = NULL,   text_rotation_alignment = NULL,   text_size = NULL,   text_transform = NULL,   text_translate = NULL,   text_translate_anchor = NULL,   text_variable_anchor = NULL,   text_writing_mode = NULL,   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   popup = NULL,   tooltip = NULL,   hover_options = NULL,   before_id = NULL,   filter = NULL,   cluster_options = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_symbol_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a symbol layer to a map — add_symbol_layer","text":"map map object created mapboxgl maplibre functions. id unique ID layer. source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). icon_allow_overlap TRUE, icon visible even collides previously drawn symbols. icon_anchor Part icon placed closest anchor. icon_color color icon.  supported many Mapbox icons; read https://docs.mapbox.com/help/troubleshooting/using-recolorable-images--mapbox-maps/. icon_color_brightness_max maximum brightness icon color. icon_color_brightness_min minimum brightness icon color. icon_color_contrast contrast icon color. icon_color_saturation saturation icon color. icon_emissive_strength strength icon's emissive color. icon_halo_blur blur applied icon's halo. icon_halo_color color icon's halo. icon_halo_width width icon's halo. icon_ignore_placement TRUE, icon visible even collides symbols. icon_image Name image sprite use drawing image background. use values column input dataset, use get_column('YOUR_ICON_COLUMN_NAME'). Images can also loaded add_image() function precede add_symbol_layer() function. icon_image_cross_fade cross-fade parameter icon image. icon_keep_upright TRUE, icon kept upright. icon_offset Offset distance icon. icon_opacity opacity icon drawn. icon_optional TRUE, icon optional. icon_padding Padding around icon. icon_pitch_alignment Alignment icon respect pitch map. icon_rotate Rotates icon clockwise. icon_rotation_alignment Alignment icon respect map. icon_size size icon, specified relative original size image. example, value 5 make icon 5 times larger original size, whereas value 0.5 make icon half size original. icon_text_fit Scales text fit icon. icon_text_fit_padding Padding text fitting icon. icon_translate offset distance icon. icon_translate_anchor Controls frame reference icon-translate. symbol_avoid_edges TRUE, symbol avoided near edges. symbol_placement Placement symbol map. symbol_sort_key Sorts features ascending order based value. symbol_spacing Spacing symbols. symbol_z_elevate TRUE, positions symbol top fill-extrusion layer. Requires symbol_placement set \"point\" symbol-z-order set \"auto\". symbol_z_offset elevation symbol, meters.  Use get_column() get elevations column dataset. symbol_z_order Orders symbol z-axis. text_allow_overlap TRUE, text visible even collides previously drawn symbols. text_anchor Part text placed closest anchor. text_color color text. text_emissive_strength strength text's emissive color. text_field Value use text label. text_font Font stack use displaying text. text_halo_blur blur applied text's halo. text_halo_color color text's halo. text_halo_width width text's halo. text_ignore_placement TRUE, text visible even collides symbols. text_justify justification text. text_keep_upright TRUE, text kept upright. text_letter_spacing Spacing text letters. text_line_height Height text lines. text_max_angle Maximum angle text. text_max_width Maximum width text. text_offset Offset distance text. text_opacity opacity text drawn. text_optional TRUE, text optional. text_padding Padding around text. text_pitch_alignment Alignment text respect pitch map. text_radial_offset Radial offset text. text_rotate Rotates text clockwise. text_rotation_alignment Alignment text respect map. text_size size text. text_transform Transform applied text. text_translate offset distance text. text_translate_anchor Controls frame reference text-translate. text_variable_anchor Variable anchor text. text_writing_mode Writing mode text. visibility Whether layer displayed. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. popup column name containing information display popup click. Columns containing HTML parsed. tooltip column name containing information display tooltip hover. Columns containing HTML parsed. hover_options named list options highlighting features layer hover. elements SVG icons can styled. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels). filter optional filter expression subset features layer. cluster_options list options clustering symbols, created cluster_options() function.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_symbol_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a symbol layer to a map — add_symbol_layer","text":"modified map object new symbol layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_symbol_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a symbol layer to a map — add_symbol_layer","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl) library(sf) library(dplyr)  # Set seed for reproducibility set.seed(1234)  # Define the bounding box for Washington DC (approximately) bbox <- st_bbox(     c(         xmin = -77.119759,         ymin = 38.791645,         xmax = -76.909393,         ymax = 38.995548     ),     crs = st_crs(4326) )  # Generate 30 random points within the bounding box random_points <- st_as_sf(     data.frame(         id = 1:30,         lon = runif(30, bbox[\"xmin\"], bbox[\"xmax\"]),         lat = runif(30, bbox[\"ymin\"], bbox[\"ymax\"])     ),     coords = c(\"lon\", \"lat\"),     crs = 4326 )  # Assign random icons icons <- c(\"music\", \"bar\", \"theatre\", \"bicycle\") random_points <- random_points |>     mutate(icon = sample(icons, n(), replace = TRUE))  # Map with icons mapboxgl(style = mapbox_style(\"light\")) |>     fit_bounds(random_points, animate = FALSE) |>     add_symbol_layer(         id = \"points-of-interest\",         source = random_points,         icon_image = c(\"get\", \"icon\"),         icon_allow_overlap = TRUE,         tooltip = \"icon\"     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_vector_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a vector tile source to a Mapbox GL or Maplibre GL map — add_vector_source","title":"Add a vector tile source to a Mapbox GL or Maplibre GL map — add_vector_source","text":"Add vector tile source Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_vector_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a vector tile source to a Mapbox GL or Maplibre GL map — add_vector_source","text":"","code":"add_vector_source(map, id, url)"},{"path":"https://walker-data.com/mapgl/reference/add_vector_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a vector tile source to a Mapbox GL or Maplibre GL map — add_vector_source","text":"map map object created mapboxgl maplibre function. id unique ID source. url URL pointing vector tile source.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_vector_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a vector tile source to a Mapbox GL or Maplibre GL map — add_vector_source","text":"modified map object new source added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_video_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a video source to a Mapbox GL or Maplibre GL map — add_video_source","title":"Add a video source to a Mapbox GL or Maplibre GL map — add_video_source","text":"Add video source Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_video_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a video source to a Mapbox GL or Maplibre GL map — add_video_source","text":"","code":"add_video_source(map, id, urls, coordinates)"},{"path":"https://walker-data.com/mapgl/reference/add_video_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a video source to a Mapbox GL or Maplibre GL map — add_video_source","text":"map map object created mapboxgl maplibre function. id unique ID source. urls vector URLs pointing video sources. coordinates list coordinates specifying video corners clockwise order: top left, top right, bottom right, bottom left.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_video_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a video source to a Mapbox GL or Maplibre GL map — add_video_source","text":"modified map object new source added.","code":""},{"path":"https://walker-data.com/mapgl/reference/carto_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CARTO Style URL — carto_style","title":"Get CARTO Style URL — carto_style","text":"Get CARTO Style URL","code":""},{"path":"https://walker-data.com/mapgl/reference/carto_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CARTO Style URL — carto_style","text":"","code":"carto_style(style_name)"},{"path":"https://walker-data.com/mapgl/reference/carto_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CARTO Style URL — carto_style","text":"style_name name style (e.g., \"voyager\", \"positron\", \"dark-matter\").","code":""},{"path":"https://walker-data.com/mapgl/reference/carto_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CARTO Style URL — carto_style","text":"style URL corresponding given style name.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_controls.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear all controls from a Mapbox GL or Maplibre GL map in a Shiny app — clear_controls","title":"Clear all controls from a Mapbox GL or Maplibre GL map in a Shiny app — clear_controls","text":"Clear controls Mapbox GL Maplibre GL map Shiny app","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_controls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear all controls from a Mapbox GL or Maplibre GL map in a Shiny app — clear_controls","text":"","code":"clear_controls(map)"},{"path":"https://walker-data.com/mapgl/reference/clear_controls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear all controls from a Mapbox GL or Maplibre GL map in a Shiny app — clear_controls","text":"map map object created mapboxgl maplibre function.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_controls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear all controls from a Mapbox GL or Maplibre GL map in a Shiny app — clear_controls","text":"modified map object controls removed.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear a layer from a map using a proxy — clear_layer","title":"Clear a layer from a map using a proxy — clear_layer","text":"function allows layer removed existing Mapbox GL map using proxy object.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear a layer from a map using a proxy — clear_layer","text":"","code":"clear_layer(proxy, layer_id)"},{"path":"https://walker-data.com/mapgl/reference/clear_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear a layer from a map using a proxy — clear_layer","text":"proxy proxy object created mapboxgl_proxy maplibre_proxy. layer_id ID layer removed.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear a layer from a map using a proxy — clear_layer","text":"updated proxy object.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear legend(s) from a map in a proxy session — clear_legend","title":"Clear legend(s) from a map in a proxy session — clear_legend","text":"Clear legend(s) map proxy session","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear legend(s) from a map in a proxy session — clear_legend","text":"","code":"clear_legend(map, legend_ids = NULL)"},{"path":"https://walker-data.com/mapgl/reference/clear_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear legend(s) from a map in a proxy session — clear_legend","text":"map map object created mapboxgl_proxy maplibre_proxy function. legend_ids Optional. character vector legend IDs clear. provided, legends cleared.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear legend(s) from a map in a proxy session — clear_legend","text":"updated map object specified legend(s) cleared.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear markers from a map in a Shiny session — clear_markers","title":"Clear markers from a map in a Shiny session — clear_markers","text":"Clear markers map Shiny session","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear markers from a map in a Shiny session — clear_markers","text":"","code":"clear_markers(map)"},{"path":"https://walker-data.com/mapgl/reference/clear_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear markers from a map in a Shiny session — clear_markers","text":"map map object created mapboxgl_proxy maplibre_proxy function.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear markers from a map in a Shiny session — clear_markers","text":"modified map object markers cleared.","code":""},{"path":"https://walker-data.com/mapgl/reference/cluster_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare cluster options for circle layers — cluster_options","title":"Prepare cluster options for circle layers — cluster_options","text":"function creates list options clustering circle layers.","code":""},{"path":"https://walker-data.com/mapgl/reference/cluster_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare cluster options for circle layers — cluster_options","text":"","code":"cluster_options(   max_zoom = 14,   cluster_radius = 50,   color_stops = c(\"#51bbd6\", \"#f1f075\", \"#f28cb1\"),   radius_stops = c(20, 30, 40),   count_stops = c(0, 100, 750),   circle_blur = NULL,   circle_opacity = NULL,   circle_stroke_color = NULL,   circle_stroke_opacity = NULL,   circle_stroke_width = NULL,   text_color = \"black\" )"},{"path":"https://walker-data.com/mapgl/reference/cluster_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare cluster options for circle layers — cluster_options","text":"max_zoom maximum zoom level cluster points. cluster_radius radius cluster clustering points. color_stops vector colors circle color step expression. radius_stops vector radii circle radius step expression. count_stops vector point counts color radius step expressions. circle_blur Amount blur circle. circle_opacity opacity circle. circle_stroke_color color circle's stroke. circle_stroke_opacity opacity circle's stroke. circle_stroke_width width circle's stroke. text_color color use labels cluster circles.","code":""},{"path":"https://walker-data.com/mapgl/reference/cluster_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare cluster options for circle layers — cluster_options","text":"list cluster options.","code":""},{"path":"https://walker-data.com/mapgl/reference/cluster_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare cluster options for circle layers — cluster_options","text":"","code":"cluster_options(     max_zoom = 14,     cluster_radius = 50,     color_stops = c(\"#51bbd6\", \"#f1f075\", \"#f28cb1\"),     radius_stops = c(20, 30, 40),     count_stops = c(0, 100, 750),     circle_blur = 1,     circle_opacity = 0.8,     circle_stroke_color = \"#ffffff\",     circle_stroke_width = 2 ) #> $max_zoom #> [1] 14 #>  #> $cluster_radius #> [1] 50 #>  #> $color_stops #> [1] \"#51bbd6\" \"#f1f075\" \"#f28cb1\" #>  #> $radius_stops #> [1] 20 30 40 #>  #> $count_stops #> [1]   0 100 750 #>  #> $circle_blur #> [1] 1 #>  #> $circle_opacity #> [1] 0.8 #>  #> $circle_stroke_color #> [1] \"#ffffff\" #>  #> $circle_stroke_opacity #> NULL #>  #> $circle_stroke_width #> [1] 2 #>  #> $text_color #> [1] \"black\" #>"},{"path":"https://walker-data.com/mapgl/reference/compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Compare widget — compare","title":"Create a Compare widget — compare","text":"function creates comparison view two Mapbox GL Maplibre GL maps, allowing users either swipe two maps view side--side synchronized navigation.","code":""},{"path":"https://walker-data.com/mapgl/reference/compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Compare widget — compare","text":"","code":"compare(   map1,   map2,   width = \"100%\",   height = NULL,   elementId = NULL,   mousemove = FALSE,   orientation = \"vertical\",   mode = \"swipe\",   swiper_color = NULL )"},{"path":"https://walker-data.com/mapgl/reference/compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Compare widget — compare","text":"map1 mapboxgl maplibre object representing first map. map2 mapboxgl maplibre object representing second map. width Width map container. height Height map container. elementId optional string specifying ID container comparison. NULL, unique ID generated. mousemove logical value indicating whether enable swiping cursor movement (rather clicked). applicable mode=\"swipe\". orientation string specifying orientation swiper side--side layout, either \"horizontal\" \"vertical\". mode string specifying comparison mode: \"swipe\" (default) swipeable comparison slider, \"sync\" synchronized maps displayed next . swiper_color optional CSS color value (e.g., \"#000000\", \"rgb(0,0,0)\", \"black\") customize color swiper handle. applicable mode=\"swipe\".","code":""},{"path":"https://walker-data.com/mapgl/reference/compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Compare widget — compare","text":"comparison widget.","code":""},{"path":[]},{"path":"https://walker-data.com/mapgl/reference/compare.html","id":"comparison-modes","dir":"Reference","previous_headings":"","what":"Comparison modes","title":"Create a Compare widget — compare","text":"compare() function supports two modes: mode=\"swipe\" (default) - Creates swipeable interface slider reveal portions map mode=\"sync\" - Places maps next synchronized navigation modes, navigation (panning, zooming, rotating, tilting) synchronized maps.","code":""},{"path":"https://walker-data.com/mapgl/reference/compare.html","id":"using-the-compare-widget-in-shiny","dir":"Reference","previous_headings":"","what":"Using the compare widget in Shiny","title":"Create a Compare widget — compare","text":"compare widget can used Shiny applications following functions: mapboxglCompareOutput() / renderMapboxglCompare() - Mapbox GL comparisons maplibreCompareOutput() / renderMaplibreCompare() - Maplibre GL comparisons mapboxgl_compare_proxy() / maplibre_compare_proxy() - updating maps compare widget creating compare widget Shiny app, can use proxy functions update either \"\" (left/top) \"\" (right/bottom) map. proxy objects work regular map update functions like set_style(), set_paint_property(), etc. get proxy targets specific map comparison:   compare widget also provides Shiny input values view state clicks. compare widget ID \"mycompare\", : input$mycompare_before_view - View state (center, zoom, bearing, pitch) left/top map input$mycompare_after_view - View state right/bottom map input$mycompare_before_click - Click events left/top map input$mycompare_after_click - Click events right/bottom map","code":"# Access the left/top map left_proxy <- maplibre_compare_proxy(\"compare_id\", map_side = \"before\")  # Access the right/bottom map right_proxy <- maplibre_compare_proxy(\"compare_id\", map_side = \"after\")"},{"path":"https://walker-data.com/mapgl/reference/compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Compare widget — compare","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  m1 <- mapboxgl(style = mapbox_style(\"light\")) m2 <- mapboxgl(style = mapbox_style(\"dark\"))  # Default swipe mode compare(m1, m2)  # Synchronized side-by-side mode compare(m1, m2, mode = \"sync\")  # Custom swiper color compare(m1, m2, swiper_color = \"#FF0000\")  # Red swiper  # Shiny example library(shiny)  ui <- fluidPage(   maplibreCompareOutput(\"comparison\") )  server <- function(input, output, session) {   output$comparison <- renderMaplibreCompare({     compare(       maplibre(style = carto_style(\"positron\")),       maplibre(style = carto_style(\"dark-matter\")),       mode = \"sync\"     )   })  # Update the right map   observe({     right_proxy <- maplibre_compare_proxy(\"comparison\", map_side = \"after\")     set_style(right_proxy, carto_style(\"voyager\"))   })      # Example with custom swiper color   output$comparison2 <- renderMaplibreCompare({     compare(       maplibre(style = carto_style(\"positron\")),       maplibre(style = carto_style(\"dark-matter\")),       swiper_color = \"#3498db\"  # Blue swiper     )   }) } } # }"},{"path":"https://walker-data.com/mapgl/reference/concat.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a concatenation expression — concat","title":"Create a concatenation expression — concat","text":"function creates concatenation expression combines multiple values expressions single string. Useful creating dynamic tooltips labels.","code":""},{"path":"https://walker-data.com/mapgl/reference/concat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a concatenation expression — concat","text":"","code":"concat(...)"},{"path":"https://walker-data.com/mapgl/reference/concat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a concatenation expression — concat","text":"... Values expressions concatenate. Can strings, numbers, expressions like get_column().","code":""},{"path":"https://walker-data.com/mapgl/reference/concat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a concatenation expression — concat","text":"list representing concatenation expression.","code":""},{"path":"https://walker-data.com/mapgl/reference/concat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a concatenation expression — concat","text":"","code":"# Create a dynamic tooltip concat(\"<strong>Name:<\/strong> \", get_column(\"name\"), \"<br>Value: \", get_column(\"value\")) #> [[1]] #> [1] \"concat\" #>  #> [[2]] #> [1] \"<strong>Name:<\/strong> \" #>  #> [[3]] #> [[3]][[1]] #> [1] \"get\" #>  #> [[3]][[2]] #> [1] \"name\" #>  #>  #> [[4]] #> [1] \"<br>Value: \" #>  #> [[5]] #> [[5]][[1]] #> [1] \"get\" #>  #> [[5]][[2]] #> [1] \"value\" #>  #>"},{"path":"https://walker-data.com/mapgl/reference/ease_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease to a given view — ease_to","title":"Ease to a given view — ease_to","text":"Ease given view","code":""},{"path":"https://walker-data.com/mapgl/reference/ease_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease to a given view — ease_to","text":"","code":"ease_to(map, center, zoom = NULL, ...)"},{"path":"https://walker-data.com/mapgl/reference/ease_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease to a given view — ease_to","text":"map map object created mapboxgl maplibre function proxy object. center numeric vector length 2 specifying target center map (longitude, latitude). zoom target zoom level. ... Additional named arguments easing view.","code":""},{"path":"https://walker-data.com/mapgl/reference/ease_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease to a given view — ease_to","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/fit_bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the map to a bounding box — fit_bounds","title":"Fit the map to a bounding box — fit_bounds","text":"Fit map bounding box","code":""},{"path":"https://walker-data.com/mapgl/reference/fit_bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the map to a bounding box — fit_bounds","text":"","code":"fit_bounds(map, bbox, animate = FALSE, ...)"},{"path":"https://walker-data.com/mapgl/reference/fit_bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the map to a bounding box — fit_bounds","text":"map map object created mapboxgl maplibre function proxy object. bbox bounding box specified numeric vector length 4 (minLng, minLat, maxLng, maxLat), sf object bounding box calculated. animate logical value indicating whether animate transition new bounds. Defaults FALSE. ... Additional named arguments fitting bounds.","code":""},{"path":"https://walker-data.com/mapgl/reference/fit_bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the map to a bounding box — fit_bounds","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/fly_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Fly to a given view — fly_to","title":"Fly to a given view — fly_to","text":"Fly given view","code":""},{"path":"https://walker-data.com/mapgl/reference/fly_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fly to a given view — fly_to","text":"","code":"fly_to(map, center, zoom = NULL, ...)"},{"path":"https://walker-data.com/mapgl/reference/fly_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fly to a given view — fly_to","text":"map map object created mapboxgl maplibre function proxy object. center numeric vector length 2 specifying target center map (longitude, latitude). zoom target zoom level. ... Additional named arguments flying view.","code":""},{"path":"https://walker-data.com/mapgl/reference/fly_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fly to a given view — fly_to","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/get_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Get column or property for use in mapping — get_column","title":"Get column or property for use in mapping — get_column","text":"function returns expression get specified column dataset (property layer).","code":""},{"path":"https://walker-data.com/mapgl/reference/get_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get column or property for use in mapping — get_column","text":"","code":"get_column(column)"},{"path":"https://walker-data.com/mapgl/reference/get_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get column or property for use in mapping — get_column","text":"column name column property get.","code":""},{"path":"https://walker-data.com/mapgl/reference/get_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get column or property for use in mapping — get_column","text":"list representing expression get column.","code":""},{"path":"https://walker-data.com/mapgl/reference/get_drawn_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Get drawn features from the map — get_drawn_features","title":"Get drawn features from the map — get_drawn_features","text":"Get drawn features map","code":""},{"path":"https://walker-data.com/mapgl/reference/get_drawn_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get drawn features from the map — get_drawn_features","text":"","code":"get_drawn_features(map)"},{"path":"https://walker-data.com/mapgl/reference/get_drawn_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get drawn features from the map — get_drawn_features","text":"map map object created mapboxgl function, mapboxgl proxy.","code":""},{"path":"https://walker-data.com/mapgl/reference/get_drawn_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get drawn features from the map — get_drawn_features","text":"sf object containing drawn features.","code":""},{"path":"https://walker-data.com/mapgl/reference/get_drawn_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get drawn features from the map — get_drawn_features","text":"","code":"if (FALSE) { # \\dontrun{ # In a Shiny application library(shiny) library(mapgl)  ui <- fluidPage(     mapboxglOutput(\"map\"),     actionButton(\"get_features\", \"Get Drawn Features\"),     verbatimTextOutput(\"feature_output\") )  server <- function(input, output, session) {     output$map <- renderMapboxgl({         mapboxgl(             style = mapbox_style(\"streets\"),             center = c(-74.50, 40),             zoom = 9         ) |>             add_draw_control()     })      observeEvent(input$get_features, {         drawn_features <- get_drawn_features(mapboxgl_proxy(\"map\"))         output$feature_output <- renderPrint({             print(drawn_features)         })     }) }  shinyApp(ui, server) } # }"},{"path":"https://walker-data.com/mapgl/reference/interpolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an interpolation expression — interpolate","title":"Create an interpolation expression — interpolate","text":"function generates interpolation expression can used style data.","code":""},{"path":"https://walker-data.com/mapgl/reference/interpolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an interpolation expression — interpolate","text":"","code":"interpolate(   column = NULL,   property = NULL,   type = \"linear\",   values,   stops,   na_color = NULL )"},{"path":"https://walker-data.com/mapgl/reference/interpolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an interpolation expression — interpolate","text":"column name column use interpolation. specified, property NULL. property name property use interpolation. specified, column NULL. type interpolation type. Can one \"linear\", list(\"exponential\", base) base specifies rate output increases, list(\"cubic-bezier\", x1, y1, x2, y2) define cubic bezier curve control points. values numeric vector values stops occur. stops vector corresponding stops (colors, sizes, etc.) interpolation. na_color color use missing values.  Mapbox GL JS defaults black supplied.","code":""},{"path":"https://walker-data.com/mapgl/reference/interpolate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an interpolation expression — interpolate","text":"list representing interpolation expression.","code":""},{"path":"https://walker-data.com/mapgl/reference/interpolate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an interpolation expression — interpolate","text":"","code":"interpolate(     column = \"estimate\",     type = \"linear\",     values = c(1000, 200000),     stops = c(\"#eff3ff\", \"#08519c\") ) #> [[1]] #> [1] \"interpolate\" #>  #> [[2]] #> [[2]][[1]] #> [1] \"linear\" #>  #>  #> [[3]] #> [[3]][[1]] #> [1] \"get\" #>  #> [[3]][[2]] #> [1] \"estimate\" #>  #>  #> [[4]] #> [1] 1000 #>  #> [[5]] #> [1] \"#eff3ff\" #>  #> [[6]] #> [1] 2e+05 #>  #> [[7]] #> [1] \"#08519c\" #>"},{"path":"https://walker-data.com/mapgl/reference/jump_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Jump to a given view — jump_to","title":"Jump to a given view — jump_to","text":"Jump given view","code":""},{"path":"https://walker-data.com/mapgl/reference/jump_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jump to a given view — jump_to","text":"","code":"jump_to(map, center, zoom = NULL, ...)"},{"path":"https://walker-data.com/mapgl/reference/jump_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jump to a given view — jump_to","text":"map map object created mapboxgl maplibre function proxy object. center numeric vector length 2 specifying target center map (longitude, latitude). zoom target zoom level. ... Additional named arguments jumping view.","code":""},{"path":"https://walker-data.com/mapgl/reference/jump_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jump to a given view — jump_to","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapbox_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Mapbox Style URL — mapbox_style","title":"Get Mapbox Style URL — mapbox_style","text":"Get Mapbox Style URL","code":""},{"path":"https://walker-data.com/mapgl/reference/mapbox_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Mapbox Style URL — mapbox_style","text":"","code":"mapbox_style(style_name)"},{"path":"https://walker-data.com/mapgl/reference/mapbox_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Mapbox Style URL — mapbox_style","text":"style_name name style (e.g., \"standard\", \"streets\", \"outdoors\", etc.).","code":""},{"path":"https://walker-data.com/mapgl/reference/mapbox_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Mapbox Style URL — mapbox_style","text":"style URL corresponding given style name.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Mapbox GL Map — mapboxgl","title":"Initialize a Mapbox GL Map — mapboxgl","text":"Initialize Mapbox GL Map","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Mapbox GL Map — mapboxgl","text":"","code":"mapboxgl(   style = NULL,   center = c(0, 0),   zoom = 0,   bearing = 0,   pitch = 0,   projection = \"globe\",   parallels = NULL,   access_token = NULL,   bounds = NULL,   width = \"100%\",   height = NULL,   ... )"},{"path":"https://walker-data.com/mapgl/reference/mapboxgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Mapbox GL Map — mapboxgl","text":"style Mapbox style use. center numeric vector length 2 specifying initial center map. zoom initial zoom level map. bearing initial bearing (rotation) map, degrees. pitch initial pitch (tilt) map, degrees. projection map projection use (e.g., \"mercator\", \"globe\"). parallels vector two numbers representing standard parallels projection.  available projection \"albers\" \"lambertConformalConic\". access_token Mapbox access token. bounds sf object bounding box fit map . width width output htmlwidget. height height output htmlwidget. ... Additional named parameters passed Mapbox GL map.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Mapbox GL Map — mapboxgl","text":"HTML widget Mapbox map.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a Mapbox GL Map — mapboxgl","text":"","code":"if (FALSE) { # \\dontrun{ mapboxgl(projection = \"globe\") } # }"},{"path":"https://walker-data.com/mapgl/reference/mapboxglCompareOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Mapbox GL Compare output element for Shiny — mapboxglCompareOutput","title":"Create a Mapbox GL Compare output element for Shiny — mapboxglCompareOutput","text":"Create Mapbox GL Compare output element Shiny","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxglCompareOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Mapbox GL Compare output element for Shiny — mapboxglCompareOutput","text":"","code":"mapboxglCompareOutput(outputId, width = \"100%\", height = \"400px\")"},{"path":"https://walker-data.com/mapgl/reference/mapboxglCompareOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Mapbox GL Compare output element for Shiny — mapboxglCompareOutput","text":"outputId output variable read width width element height height element","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxglCompareOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Mapbox GL Compare output element for Shiny — mapboxglCompareOutput","text":"Mapbox GL Compare output element use Shiny UI","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxglOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Mapbox GL output element for Shiny — mapboxglOutput","title":"Create a Mapbox GL output element for Shiny — mapboxglOutput","text":"Create Mapbox GL output element Shiny","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxglOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Mapbox GL output element for Shiny — mapboxglOutput","text":"","code":"mapboxglOutput(outputId, width = \"100%\", height = \"400px\")"},{"path":"https://walker-data.com/mapgl/reference/mapboxglOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Mapbox GL output element for Shiny — mapboxglOutput","text":"outputId output variable read width width element height height element","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxglOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Mapbox GL output element for Shiny — mapboxglOutput","text":"Mapbox GL output element use Shiny UI","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_compare_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a proxy object for a Mapbox GL Compare widget in Shiny — mapboxgl_compare_proxy","title":"Create a proxy object for a Mapbox GL Compare widget in Shiny — mapboxgl_compare_proxy","text":"function allows updates sent existing Mapbox GL Compare widget Shiny application.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_compare_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a proxy object for a Mapbox GL Compare widget in Shiny — mapboxgl_compare_proxy","text":"","code":"mapboxgl_compare_proxy(   compareId,   session = shiny::getDefaultReactiveDomain(),   map_side = \"before\" )"},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_compare_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a proxy object for a Mapbox GL Compare widget in Shiny — mapboxgl_compare_proxy","text":"compareId ID compare output element. session Shiny session object. map_side map side target compare widget, either \"\" \"\".","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_compare_proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a proxy object for a Mapbox GL Compare widget in Shiny — mapboxgl_compare_proxy","text":"proxy object Mapbox GL Compare widget.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a proxy object for a Mapbox GL map in Shiny — mapboxgl_proxy","title":"Create a proxy object for a Mapbox GL map in Shiny — mapboxgl_proxy","text":"function allows updates sent existing Mapbox GL map Shiny application without redrawing entire map.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a proxy object for a Mapbox GL map in Shiny — mapboxgl_proxy","text":"","code":"mapboxgl_proxy(mapId, session = shiny::getDefaultReactiveDomain())"},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a proxy object for a Mapbox GL map in Shiny — mapboxgl_proxy","text":"mapId ID map output element. session Shiny session object.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a proxy object for a Mapbox GL map in Shiny — mapboxgl_proxy","text":"proxy object Mapbox GL map.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick visualization of geometries with Mapbox GL — mapboxgl_view","title":"Quick visualization of geometries with Mapbox GL — mapboxgl_view","text":"function provides quick way visualize sf geometries using Mapbox GL JS. automatically detects geometry type applies appropriate styling.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick visualization of geometries with Mapbox GL — mapboxgl_view","text":"","code":"mapboxgl_view(   data,   column = NULL,   n = NULL,   style = mapbox_style(\"light\"),   ... )"},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick visualization of geometries with Mapbox GL — mapboxgl_view","text":"data sf object visualize column name column visualize. NULL (default), geometries shown default styling. n Number quantile breaks numeric columns. specified, uses step_expr() instead interpolate(). style Mapbox style use. Defaults mapbox_style(\"light\"). ... Additional arguments passed mapboxgl()","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick visualization of geometries with Mapbox GL — mapboxgl_view","text":"Mapbox GL map object","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick visualization of geometries with Mapbox GL — mapboxgl_view","text":"","code":"if (FALSE) { # \\dontrun{ library(sf) nc <- st_read(system.file(\"shape/nc.shp\", package = \"sf\"))  # Basic view mapboxgl_view(nc)  # View with column visualization mapboxgl_view(nc, column = \"AREA\")  # View with quantile breaks mapboxgl_view(nc, column = \"AREA\", n = 5) } # }"},{"path":"https://walker-data.com/mapgl/reference/mapgl-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mapgl: Interactive Maps with 'Mapbox GL JS' and 'MapLibre GL JS' — mapgl-package","title":"mapgl: Interactive Maps with 'Mapbox GL JS' and 'MapLibre GL JS' — mapgl-package","text":"Provides interface 'Mapbox GL JS' (https://docs.mapbox.com/mapbox-gl-js/guides) 'MapLibre GL JS' (https://maplibre.org/maplibre-gl-js/docs/) interactive mapping libraries help users create custom interactive maps R. Users can create interactive globe visualizations; layer 'sf' objects create filled maps, circle maps, 'heatmaps', three-dimensional graphics; customize map styles views. package also includes utilities use 'Mapbox' 'MapLibre' maps 'Shiny' web applications.","code":""},{"path":[]},{"path":"https://walker-data.com/mapgl/reference/mapgl-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mapgl: Interactive Maps with 'Mapbox GL JS' and 'MapLibre GL JS' — mapgl-package","text":"Maintainer: Kyle Walker kyle@walker-data.com","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Maplibre GL Map — maplibre","title":"Initialize a Maplibre GL Map — maplibre","text":"Initialize Maplibre GL Map","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Maplibre GL Map — maplibre","text":"","code":"maplibre(   style = carto_style(\"voyager\"),   center = c(0, 0),   zoom = 0,   bearing = 0,   pitch = 0,   bounds = NULL,   width = \"100%\",   height = NULL,   ... )"},{"path":"https://walker-data.com/mapgl/reference/maplibre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Maplibre GL Map — maplibre","text":"style style JSON use. center numeric vector length 2 specifying initial center map. zoom initial zoom level map. bearing initial bearing (rotation) map, degrees. pitch initial pitch (tilt) map, degrees. bounds sf object bounding box fit map . width width output htmlwidget. height height output htmlwidget. ... Additional named parameters passed Mapbox GL map.","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Maplibre GL Map — maplibre","text":"HTML widget Mapbox map.","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a Maplibre GL Map — maplibre","text":"","code":"if (FALSE) { # \\dontrun{ maplibre() } # }"},{"path":"https://walker-data.com/mapgl/reference/maplibreCompareOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Maplibre GL Compare output element for Shiny — maplibreCompareOutput","title":"Create a Maplibre GL Compare output element for Shiny — maplibreCompareOutput","text":"Create Maplibre GL Compare output element Shiny","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibreCompareOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Maplibre GL Compare output element for Shiny — maplibreCompareOutput","text":"","code":"maplibreCompareOutput(outputId, width = \"100%\", height = \"400px\")"},{"path":"https://walker-data.com/mapgl/reference/maplibreCompareOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Maplibre GL Compare output element for Shiny — maplibreCompareOutput","text":"outputId output variable read width width element height height element","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibreCompareOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Maplibre GL Compare output element for Shiny — maplibreCompareOutput","text":"Maplibre GL Compare output element use Shiny UI","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibreOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Maplibre GL output element for Shiny — maplibreOutput","title":"Create a Maplibre GL output element for Shiny — maplibreOutput","text":"Create Maplibre GL output element Shiny","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibreOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Maplibre GL output element for Shiny — maplibreOutput","text":"","code":"maplibreOutput(outputId, width = \"100%\", height = \"400px\")"},{"path":"https://walker-data.com/mapgl/reference/maplibreOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Maplibre GL output element for Shiny — maplibreOutput","text":"outputId output variable read width width element height height element","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibreOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Maplibre GL output element for Shiny — maplibreOutput","text":"Maplibre GL output element use Shiny UI","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre_compare_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a proxy object for a Maplibre GL Compare widget in Shiny — maplibre_compare_proxy","title":"Create a proxy object for a Maplibre GL Compare widget in Shiny — maplibre_compare_proxy","text":"function allows updates sent existing Maplibre GL Compare widget Shiny application.","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre_compare_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a proxy object for a Maplibre GL Compare widget in Shiny — maplibre_compare_proxy","text":"","code":"maplibre_compare_proxy(   compareId,   session = shiny::getDefaultReactiveDomain(),   map_side = \"before\" )"},{"path":"https://walker-data.com/mapgl/reference/maplibre_compare_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a proxy object for a Maplibre GL Compare widget in Shiny — maplibre_compare_proxy","text":"compareId ID compare output element. session Shiny session object. map_side map side target compare widget, either \"\" \"\".","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre_compare_proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a proxy object for a Maplibre GL Compare widget in Shiny — maplibre_compare_proxy","text":"proxy object Maplibre GL Compare widget.","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a proxy object for a Maplibre GL map in Shiny — maplibre_proxy","title":"Create a proxy object for a Maplibre GL map in Shiny — maplibre_proxy","text":"function allows updates sent existing Maplibre GL map Shiny application without redrawing entire map.","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a proxy object for a Maplibre GL map in Shiny — maplibre_proxy","text":"","code":"maplibre_proxy(mapId, session = shiny::getDefaultReactiveDomain())"},{"path":"https://walker-data.com/mapgl/reference/maplibre_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a proxy object for a Maplibre GL map in Shiny — maplibre_proxy","text":"mapId ID map output element. session Shiny session object.","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre_proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a proxy object for a Maplibre GL map in Shiny — maplibre_proxy","text":"proxy object Maplibre GL map.","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick visualization of geometries with MapLibre GL — maplibre_view","title":"Quick visualization of geometries with MapLibre GL — maplibre_view","text":"function provides quick way visualize sf geometries using MapLibre GL JS. automatically detects geometry type applies appropriate styling.","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick visualization of geometries with MapLibre GL — maplibre_view","text":"","code":"maplibre_view(   data,   column = NULL,   n = NULL,   style = carto_style(\"positron\"),   ... )"},{"path":"https://walker-data.com/mapgl/reference/maplibre_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick visualization of geometries with MapLibre GL — maplibre_view","text":"data sf object visualize column name column visualize. NULL (default), geometries shown default styling. n Number quantile breaks numeric columns. specified, uses step_expr() instead interpolate(). style MapLibre style use. Defaults carto_style(\"positron\"). ... Additional arguments passed maplibre()","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick visualization of geometries with MapLibre GL — maplibre_view","text":"MapLibre GL map object","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick visualization of geometries with MapLibre GL — maplibre_view","text":"","code":"if (FALSE) { # \\dontrun{ library(sf) nc <- st_read(system.file(\"shape/nc.shp\", package = \"sf\"))  # Basic view maplibre_view(nc)  # View with column visualization maplibre_view(nc, column = \"AREA\")  # View with quantile breaks maplibre_view(nc, column = \"AREA\", n = 5) } # }"},{"path":"https://walker-data.com/mapgl/reference/maptiler_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Get MapTiler Style URL — maptiler_style","title":"Get MapTiler Style URL — maptiler_style","text":"Get MapTiler Style URL","code":""},{"path":"https://walker-data.com/mapgl/reference/maptiler_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get MapTiler Style URL — maptiler_style","text":"","code":"maptiler_style(style_name, api_key = NULL)"},{"path":"https://walker-data.com/mapgl/reference/maptiler_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get MapTiler Style URL — maptiler_style","text":"style_name name style (e.g., \"basic\", \"streets\", \"toner\", etc.). api_key MapTiler API key (required)","code":""},{"path":"https://walker-data.com/mapgl/reference/maptiler_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get MapTiler Style URL — maptiler_style","text":"style URL corresponding given style name.","code":""},{"path":"https://walker-data.com/mapgl/reference/match_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a match expression — match_expr","title":"Create a match expression — match_expr","text":"function generates match expression can used style data.","code":""},{"path":"https://walker-data.com/mapgl/reference/match_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a match expression — match_expr","text":"","code":"match_expr(column = NULL, property = NULL, values, stops, default = \"#cccccc\")"},{"path":"https://walker-data.com/mapgl/reference/match_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a match expression — match_expr","text":"column name column use match expression. specified, property NULL. property name property use match expression. specified, column NULL. values vector values match . stops vector corresponding stops (colors, etc.) matched values. default default value use matches found.","code":""},{"path":"https://walker-data.com/mapgl/reference/match_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a match expression — match_expr","text":"list representing match expression.","code":""},{"path":"https://walker-data.com/mapgl/reference/match_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a match expression — match_expr","text":"","code":"match_expr(     column = \"category\",     values = c(\"A\", \"B\", \"C\"),     stops = c(\"#ff0000\", \"#00ff00\", \"#0000ff\"),     default = \"#cccccc\" ) #> [[1]] #> [1] \"match\" #>  #> [[2]] #> [[2]][[1]] #> [1] \"get\" #>  #> [[2]][[2]] #> [1] \"category\" #>  #>  #> [[3]] #> [1] \"A\" #>  #> [[4]] #> [1] \"#ff0000\" #>  #> [[5]] #> [1] \"B\" #>  #> [[6]] #> [1] \"#00ff00\" #>  #> [[7]] #> [1] \"C\" #>  #> [[8]] #> [1] \"#0000ff\" #>  #> [[9]] #> [1] \"#cccccc\" #>"},{"path":"https://walker-data.com/mapgl/reference/move_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Move a layer to a different z-position — move_layer","title":"Move a layer to a different z-position — move_layer","text":"function allows layer moved different z-position existing Mapbox GL Maplibre GL map using proxy object.","code":""},{"path":"https://walker-data.com/mapgl/reference/move_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move a layer to a different z-position — move_layer","text":"","code":"move_layer(proxy, layer_id, before_id = NULL)"},{"path":"https://walker-data.com/mapgl/reference/move_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move a layer to a different z-position — move_layer","text":"proxy proxy object created mapboxgl_proxy maplibre_proxy. layer_id ID layer move. before_id ID existing layer insert new layer . Important: means layer appear immediately behind layer defined before_id. omitted, layer appended end layers array appear layers.","code":""},{"path":"https://walker-data.com/mapgl/reference/move_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move a layer to a different z-position — move_layer","text":"updated proxy object.","code":""},{"path":"https://walker-data.com/mapgl/reference/number_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a number formatting expression — number_format","title":"Create a number formatting expression — number_format","text":"function creates number formatting expression formats numeric values according locale-specific conventions. can used tooltips, popups, text fields symbol layers.","code":""},{"path":"https://walker-data.com/mapgl/reference/number_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a number formatting expression — number_format","text":"","code":"number_format(   column,   locale = \"en-US\",   style = \"decimal\",   currency = NULL,   unit = NULL,   minimum_fraction_digits = NULL,   maximum_fraction_digits = NULL,   minimum_integer_digits = NULL,   use_grouping = NULL,   notation = NULL,   compact_display = NULL )"},{"path":"https://walker-data.com/mapgl/reference/number_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a number formatting expression — number_format","text":"column name column containing numeric value format. Can also expression evaluates number. locale string specifying locale use formatting (e.g., \"en-US\", \"de-DE\", \"fr-FR\"). Defaults \"en-US\". style formatting style use. Options include: \"decimal\" (default): Plain number formatting \"currency\": Currency formatting (requires currency parameter) \"percent\": Percentage formatting (multiplies 100 adds %) \"unit\": Unit formatting (requires unit parameter) currency style = \"currency\", ISO 4217 currency code (e.g., \"USD\", \"EUR\", \"GBP\"). unit style = \"unit\", unit use (e.g., \"kilometer\", \"mile\", \"liter\"). minimum_fraction_digits minimum number fraction digits display. maximum_fraction_digits maximum number fraction digits display. minimum_integer_digits minimum number integer digits display. use_grouping Whether use grouping separators (e.g., thousands separators). Defaults TRUE. notation formatting notation. Options include: \"standard\" (default): Regular notation \"scientific\": Scientific notation \"engineering\": Engineering notation \"compact\": Compact notation (e.g., \"1.2K\", \"3.4M\") compact_display notation = \"compact\", whether use \"short\" (default) \"long\" form.","code":""},{"path":"https://walker-data.com/mapgl/reference/number_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a number formatting expression — number_format","text":"list representing number-format expression.","code":""},{"path":"https://walker-data.com/mapgl/reference/number_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a number formatting expression — number_format","text":"","code":"# Basic number formatting with thousands separators number_format(\"population\") #> [[1]] #> [1] \"number-format\" #>  #> [[2]] #> [[2]][[1]] #> [1] \"get\" #>  #> [[2]][[2]] #> [1] \"population\" #>  #>  #> [[3]] #> [[3]]$locale #> [1] \"en-US\" #>  #> [[3]]$style #> [1] \"decimal\" #>  #>   # Currency formatting number_format(\"income\", style = \"currency\", currency = \"USD\") #> [[1]] #> [1] \"number-format\" #>  #> [[2]] #> [[2]][[1]] #> [1] \"get\" #>  #> [[2]][[2]] #> [1] \"income\" #>  #>  #> [[3]] #> [[3]]$locale #> [1] \"en-US\" #>  #> [[3]]$style #> [1] \"currency\" #>  #> [[3]]$currency #> [1] \"USD\" #>  #>   # Percentage with 1 decimal place number_format(\"rate\", style = \"percent\", maximum_fraction_digits = 1) #> [[1]] #> [1] \"number-format\" #>  #> [[2]] #> [[2]][[1]] #> [1] \"get\" #>  #> [[2]][[2]] #> [1] \"rate\" #>  #>  #> [[3]] #> [[3]]$locale #> [1] \"en-US\" #>  #> [[3]]$style #> [1] \"percent\" #>  #> [[3]]$`max-fraction-digits` #> [1] 1 #>  #>   # Compact notation for large numbers number_format(\"population\", notation = \"compact\") #> [[1]] #> [1] \"number-format\" #>  #> [[2]] #> [[2]][[1]] #> [1] \"get\" #>  #> [[2]][[2]] #> [1] \"population\" #>  #>  #> [[3]] #> [[3]]$locale #> [1] \"en-US\" #>  #> [[3]]$style #> [1] \"decimal\" #>  #> [[3]]$notation #> [1] \"compact\" #>  #>   # Using within a tooltip concat(\"Population: \", number_format(\"population\", notation = \"compact\")) #> [[1]] #> [1] \"concat\" #>  #> [[2]] #> [1] \"Population: \" #>  #> [[3]] #> [[3]][[1]] #> [1] \"number-format\" #>  #> [[3]][[2]] #> [[3]][[2]][[1]] #> [1] \"get\" #>  #> [[3]][[2]][[2]] #> [1] \"population\" #>  #>  #> [[3]][[3]] #> [[3]][[3]]$locale #> [1] \"en-US\" #>  #> [[3]][[3]]$style #> [1] \"decimal\" #>  #> [[3]][[3]]$notation #> [1] \"compact\" #>  #>  #>   # Using with get_column() number_format(get_column(\"value\"), style = \"currency\", currency = \"EUR\") #> [[1]] #> [1] \"number-format\" #>  #> [[2]] #> [[2]][[1]] #> [1] \"get\" #>  #> [[2]][[2]] #> [1] \"value\" #>  #>  #> [[3]] #> [[3]]$locale #> [1] \"en-US\" #>  #> [[3]]$style #> [1] \"currency\" #>  #> [[3]]$currency #> [1] \"EUR\" #>  #>"},{"path":"https://walker-data.com/mapgl/reference/on_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Observe events on story map section transitions — on_section","title":"Observe events on story map section transitions — on_section","text":"given story_section(), may want trigger event section becomes visible. function wraps shiny::observeEvent() allow modify state map invoke Shiny actions user scroll.","code":""},{"path":"https://walker-data.com/mapgl/reference/on_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Observe events on story map section transitions — on_section","text":"","code":"on_section(map_id, section_id, handler)"},{"path":"https://walker-data.com/mapgl/reference/on_section.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Observe events on story map section transitions — on_section","text":"map_id ID map output section_id ID section trigger , defined story_section() handler Expression execute section becomes visible.","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMapboxgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a Mapbox GL output element in Shiny — renderMapboxgl","title":"Render a Mapbox GL output element in Shiny — renderMapboxgl","text":"Render Mapbox GL output element Shiny","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMapboxgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a Mapbox GL output element in Shiny — renderMapboxgl","text":"","code":"renderMapboxgl(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://walker-data.com/mapgl/reference/renderMapboxgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a Mapbox GL output element in Shiny — renderMapboxgl","text":"expr expression generates Mapbox GL map env environment evaluate expr quoted expr quoted expression","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMapboxgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a Mapbox GL output element in Shiny — renderMapboxgl","text":"rendered Mapbox GL map use Shiny server","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMapboxglCompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a Mapbox GL Compare output element in Shiny — renderMapboxglCompare","title":"Render a Mapbox GL Compare output element in Shiny — renderMapboxglCompare","text":"Render Mapbox GL Compare output element Shiny","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMapboxglCompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a Mapbox GL Compare output element in Shiny — renderMapboxglCompare","text":"","code":"renderMapboxglCompare(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://walker-data.com/mapgl/reference/renderMapboxglCompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a Mapbox GL Compare output element in Shiny — renderMapboxglCompare","text":"expr expression generates Mapbox GL Compare map env environment evaluate expr quoted expr quoted expression","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMapboxglCompare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a Mapbox GL Compare output element in Shiny — renderMapboxglCompare","text":"rendered Mapbox GL Compare map use Shiny server","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMaplibre.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a Maplibre GL output element in Shiny — renderMaplibre","title":"Render a Maplibre GL output element in Shiny — renderMaplibre","text":"Render Maplibre GL output element Shiny","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMaplibre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a Maplibre GL output element in Shiny — renderMaplibre","text":"","code":"renderMaplibre(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://walker-data.com/mapgl/reference/renderMaplibre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a Maplibre GL output element in Shiny — renderMaplibre","text":"expr expression generates Maplibre GL map env environment evaluate expr quoted expr quoted expression","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMaplibre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a Maplibre GL output element in Shiny — renderMaplibre","text":"rendered Maplibre GL map use Shiny server","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMaplibreCompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a Maplibre GL Compare output element in Shiny — renderMaplibreCompare","title":"Render a Maplibre GL Compare output element in Shiny — renderMaplibreCompare","text":"Render Maplibre GL Compare output element Shiny","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMaplibreCompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a Maplibre GL Compare output element in Shiny — renderMaplibreCompare","text":"","code":"renderMaplibreCompare(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://walker-data.com/mapgl/reference/renderMaplibreCompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a Maplibre GL Compare output element in Shiny — renderMaplibreCompare","text":"expr expression generates Maplibre GL Compare map env environment evaluate expr quoted expr quoted expression","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMaplibreCompare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a Maplibre GL Compare output element in Shiny — renderMaplibreCompare","text":"rendered Maplibre GL Compare map use Shiny server","code":""},{"path":"https://walker-data.com/mapgl/reference/set_config_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a configuration property for a Mapbox GL map — set_config_property","title":"Set a configuration property for a Mapbox GL map — set_config_property","text":"Set configuration property Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/set_config_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a configuration property for a Mapbox GL map — set_config_property","text":"","code":"set_config_property(map, import_id, config_name, value)"},{"path":"https://walker-data.com/mapgl/reference/set_config_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a configuration property for a Mapbox GL map — set_config_property","text":"map map object created mapboxgl function proxy object defined mapboxgl_proxy(). import_id name imported style set config (e.g., 'basemap'). config_name name configuration property style. value value set configuration property.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_config_property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a configuration property for a Mapbox GL map — set_config_property","text":"updated map object configuration property set.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a filter on a map layer — set_filter","title":"Set a filter on a map layer — set_filter","text":"function sets filter map layer, working regular map objects proxy objects.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a filter on a map layer — set_filter","text":"","code":"set_filter(map, layer_id, filter)"},{"path":"https://walker-data.com/mapgl/reference/set_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a filter on a map layer — set_filter","text":"map map object created mapboxgl maplibre function, proxy object. layer_id ID layer filter applied. filter filter expression apply.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a filter on a map layer — set_filter","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_fog.html","id":null,"dir":"Reference","previous_headings":"","what":"Set fog on a Mapbox GL map — set_fog","title":"Set fog on a Mapbox GL map — set_fog","text":"Set fog Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/set_fog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set fog on a Mapbox GL map — set_fog","text":"","code":"set_fog(   map,   range = NULL,   color = NULL,   horizon_blend = NULL,   high_color = NULL,   space_color = NULL,   star_intensity = NULL )"},{"path":"https://walker-data.com/mapgl/reference/set_fog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set fog on a Mapbox GL map — set_fog","text":"map map object created mapboxgl function proxy object. range numeric vector length 2 defining minimum maximum range fog. color string specifying color fog. horizon_blend number 0 1 controlling blending fog horizon. high_color string specifying color fog higher elevations. space_color string specifying color fog space. star_intensity number 0 1 controlling intensity stars fog.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_fog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set fog on a Mapbox GL map — set_fog","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_layout_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a layout property on a map layer — set_layout_property","title":"Set a layout property on a map layer — set_layout_property","text":"Set layout property map layer","code":""},{"path":"https://walker-data.com/mapgl/reference/set_layout_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a layout property on a map layer — set_layout_property","text":"","code":"set_layout_property(map, layer, name, value)"},{"path":"https://walker-data.com/mapgl/reference/set_layout_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a layout property on a map layer — set_layout_property","text":"map map object created mapboxgl maplibre function, proxy object. layer ID layer update. name name layout property set. value value set property .","code":""},{"path":"https://walker-data.com/mapgl/reference/set_layout_property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a layout property on a map layer — set_layout_property","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_paint_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a paint property on a map layer — set_paint_property","title":"Set a paint property on a map layer — set_paint_property","text":"Set paint property map layer","code":""},{"path":"https://walker-data.com/mapgl/reference/set_paint_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a paint property on a map layer — set_paint_property","text":"","code":"set_paint_property(map, layer, name, value)"},{"path":"https://walker-data.com/mapgl/reference/set_paint_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a paint property on a map layer — set_paint_property","text":"map map object created mapboxgl maplibre function, proxy object. layer ID layer update. name name paint property set. value value set property .","code":""},{"path":"https://walker-data.com/mapgl/reference/set_paint_property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a paint property on a map layer — set_paint_property","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_popup.html","id":null,"dir":"Reference","previous_headings":"","what":"Set popup on a map layer — set_popup","title":"Set popup on a map layer — set_popup","text":"Set popup map layer","code":""},{"path":"https://walker-data.com/mapgl/reference/set_popup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set popup on a map layer — set_popup","text":"","code":"set_popup(map, layer, popup)"},{"path":"https://walker-data.com/mapgl/reference/set_popup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set popup on a map layer — set_popup","text":"map map object created mapboxgl maplibre function, proxy object. layer ID layer update. popup name popup property expression set.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_popup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set popup on a map layer — set_popup","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Projection for a Mapbox/Maplibre Map — set_projection","title":"Set Projection for a Mapbox/Maplibre Map — set_projection","text":"function sets projection dynamically map initialization.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Projection for a Mapbox/Maplibre Map — set_projection","text":"","code":"set_projection(map, projection)"},{"path":"https://walker-data.com/mapgl/reference/set_projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Projection for a Mapbox/Maplibre Map — set_projection","text":"map map object created mapboxgl() maplibre() functions, respective proxy objects projection string representing projection name (e.g., \"mercator\", \"globe\", \"albers\", \"equalEarth\", etc.)","code":""},{"path":"https://walker-data.com/mapgl/reference/set_projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Projection for a Mapbox/Maplibre Map — set_projection","text":"modified map object","code":""},{"path":"https://walker-data.com/mapgl/reference/set_rain.html","id":null,"dir":"Reference","previous_headings":"","what":"Set rain effect on a Mapbox GL map — set_rain","title":"Set rain effect on a Mapbox GL map — set_rain","text":"Set rain effect Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/set_rain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set rain effect on a Mapbox GL map — set_rain","text":"","code":"set_rain(   map,   density = 0.5,   intensity = 1,   color = \"#a8adbc\",   opacity = 0.7,   center_thinning = 0.57,   direction = c(0, 80),   droplet_size = c(2.6, 18.2),   distortion_strength = 0.7,   vignette = 1,   vignette_color = \"#464646\",   remove = FALSE )"},{"path":"https://walker-data.com/mapgl/reference/set_rain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set rain effect on a Mapbox GL map — set_rain","text":"map map object created mapboxgl function proxy object. density number 0 1 controlling rain particles density. Default 0.5. intensity number 0 1 controlling rain particles movement speed. Default 1. color string specifying color rain droplets. Default \"#a8adbc\". opacity number 0 1 controlling rain particles opacity. Default 0.7. center_thinning number 0 1 controlling thinning factor rain particles center. Default 0.57. direction numeric vector length 2 defining azimuth polar angles rain direction. Default c(0, 80). droplet_size numeric vector length 2 controlling rain droplet size (x - normal direction, y - along direction). Default c(2.6, 18.2). distortion_strength number 0 1 controlling rain particles screen-space distortion strength. Default 0.7. vignette number 0 1 controlling screen-space vignette rain tinting effect intensity. Default 1.0. vignette_color string specifying rain vignette screen-space corners tint color. Default \"#464646\". remove logical value indicating whether remove rain effect. Default FALSE.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_rain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set rain effect on a Mapbox GL map — set_rain","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_rain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set rain effect on a Mapbox GL map — set_rain","text":"","code":"if (FALSE) { # \\dontrun{ # Add rain effect with default values mapboxgl(...) |> set_rain()  # Add rain effect with custom values mapboxgl(   style = mapbox_style(\"standard\"),   center = c(24.951528, 60.169573),   zoom = 16.8,   pitch = 74,   bearing = 12.8 ) |>   set_rain(     density = 0.5,     opacity = 0.7,     color = \"#a8adbc\"   )    # Remove rain effect (useful in Shiny) map_proxy |> set_rain(remove = TRUE) } # }"},{"path":"https://walker-data.com/mapgl/reference/set_snow.html","id":null,"dir":"Reference","previous_headings":"","what":"Set snow effect on a Mapbox GL map — set_snow","title":"Set snow effect on a Mapbox GL map — set_snow","text":"Set snow effect Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/set_snow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set snow effect on a Mapbox GL map — set_snow","text":"","code":"set_snow(   map,   density = 0.85,   intensity = 1,   color = \"#ffffff\",   opacity = 1,   center_thinning = 0.4,   direction = c(0, 50),   flake_size = 0.71,   vignette = 0.3,   vignette_color = \"#ffffff\",   remove = FALSE )"},{"path":"https://walker-data.com/mapgl/reference/set_snow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set snow effect on a Mapbox GL map — set_snow","text":"map map object created mapboxgl function proxy object. density number 0 1 controlling snow particles density. Default 0.85. intensity number 0 1 controlling snow particles movement speed. Default 1.0. color string specifying color snow particles. Default \"#ffffff\". opacity number 0 1 controlling snow particles opacity. Default 1.0. center_thinning number 0 1 controlling thinning factor snow particles center. Default 0.4. direction numeric vector length 2 defining azimuth polar angles snow direction. Default c(0, 50). flake_size number 0 5 controlling snow flake particle size. Default 0.71. vignette number 0 1 controlling snow vignette screen-space effect. Default 0.3. vignette_color string specifying snow vignette screen-space corners tint color. Default \"#ffffff\". remove logical value indicating whether remove snow effect. Default FALSE.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_snow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set snow effect on a Mapbox GL map — set_snow","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_snow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set snow effect on a Mapbox GL map — set_snow","text":"","code":"if (FALSE) { # \\dontrun{ # Add snow effect with default values mapboxgl(...) |> set_snow()  # Add snow effect with custom values mapboxgl(   style = mapbox_style(\"standard\"),   center = c(24.951528, 60.169573),   zoom = 16.8,   pitch = 74,   bearing = 12.8 ) |>   set_snow(     density = 0.85,     flake_size = 0.71,     color = \"#ffffff\"   )    # Remove snow effect (useful in Shiny) map_proxy |> set_snow(remove = TRUE) } # }"},{"path":"https://walker-data.com/mapgl/reference/set_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Set source of a map layer — set_source","title":"Set source of a map layer — set_source","text":"Set source map layer","code":""},{"path":"https://walker-data.com/mapgl/reference/set_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set source of a map layer — set_source","text":"","code":"set_source(map, layer, source)"},{"path":"https://walker-data.com/mapgl/reference/set_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set source of a map layer — set_source","text":"map map object created mapboxgl maplibre function, proxy object. layer ID layer update. source sf object (converted GeoJSON source).","code":""},{"path":"https://walker-data.com/mapgl/reference/set_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set source of a map layer — set_source","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the style of a map — set_style","title":"Update the style of a map — set_style","text":"Update style map","code":""},{"path":"https://walker-data.com/mapgl/reference/set_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the style of a map — set_style","text":"","code":"set_style(map, style, config = NULL, diff = TRUE, preserve_layers = TRUE)"},{"path":"https://walker-data.com/mapgl/reference/set_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the style of a map — set_style","text":"map map object created mapboxgl maplibre function, proxy object. style new style URL applied map. config named list options passed style config. diff boolean attempts diff-based update rather re-drawing full style. available styles. preserve_layers boolean indicates whether preserve user-added sources layers changing styles. Defaults TRUE.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the style of a map — set_style","text":"modified map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the style of a map — set_style","text":"","code":"if (FALSE) { # \\dontrun{ map <- mapboxgl(     style = mapbox_style(\"streets\"),     center = c(-74.006, 40.7128),     zoom = 10,     access_token = \"your_mapbox_access_token\" )  # Update the map style in a Shiny app observeEvent(input$change_style, {     mapboxgl_proxy(\"map\", session) %>%         set_style(mapbox_style(\"dark\"), config = list(showLabels = FALSE), diff = TRUE) }) } # }"},{"path":"https://walker-data.com/mapgl/reference/set_terrain.html","id":null,"dir":"Reference","previous_headings":"","what":"Set terrain properties on a map — set_terrain","title":"Set terrain properties on a map — set_terrain","text":"Set terrain properties map","code":""},{"path":"https://walker-data.com/mapgl/reference/set_terrain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set terrain properties on a map — set_terrain","text":"","code":"set_terrain(map, source, exaggeration = 1)"},{"path":"https://walker-data.com/mapgl/reference/set_terrain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set terrain properties on a map — set_terrain","text":"map map object created mapboxgl maplibre functions. source ID raster DEM source. exaggeration terrain exaggeration factor.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_terrain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set terrain properties on a map — set_terrain","text":"modified map object terrain settings applied.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_terrain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set terrain properties on a map — set_terrain","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl(   style = mapbox_style(\"standard-satellite\"),   center = c(-114.26608, 32.7213),   zoom = 14,   pitch = 80,   bearing = 41 ) |>   add_raster_dem_source(     id = \"mapbox-dem\",     url = \"mapbox://mapbox.mapbox-terrain-dem-v1\",     tileSize = 512,     maxzoom = 14   ) |>   set_terrain(     source = \"mapbox-dem\",     exaggeration = 1.5   ) } # }"},{"path":"https://walker-data.com/mapgl/reference/set_tooltip.html","id":null,"dir":"Reference","previous_headings":"","what":"Set tooltip on a map layer — set_tooltip","title":"Set tooltip on a map layer — set_tooltip","text":"Set tooltip map layer","code":""},{"path":"https://walker-data.com/mapgl/reference/set_tooltip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set tooltip on a map layer — set_tooltip","text":"","code":"set_tooltip(map, layer, tooltip)"},{"path":"https://walker-data.com/mapgl/reference/set_tooltip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set tooltip on a map layer — set_tooltip","text":"map map object created mapboxgl maplibre function, proxy object. layer ID layer update. tooltip name tooltip set.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_tooltip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set tooltip on a map layer — set_tooltip","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the map center and zoom level — set_view","title":"Set the map center and zoom level — set_view","text":"Set map center zoom level","code":""},{"path":"https://walker-data.com/mapgl/reference/set_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the map center and zoom level — set_view","text":"","code":"set_view(map, center, zoom)"},{"path":"https://walker-data.com/mapgl/reference/set_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the map center and zoom level — set_view","text":"map map object created mapboxgl maplibre function proxy object. center numeric vector length 2 specifying center map (longitude, latitude). zoom zoom level.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the map center and zoom level — set_view","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/step_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a step expression — step_expr","title":"Create a step expression — step_expr","text":"function generates step expression can used styles.","code":""},{"path":"https://walker-data.com/mapgl/reference/step_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a step expression — step_expr","text":"","code":"step_expr(column = NULL, property = NULL, base, values, stops, na_color = NULL)"},{"path":"https://walker-data.com/mapgl/reference/step_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a step expression — step_expr","text":"column name column use step expression. specified, property NULL. property name property use step expression. specified, column NULL. base base value use step expression. values numeric vector values steps occur. stops vector corresponding stops (colors, sizes, etc.) steps. na_color color use missing values.  Mapbox GL JS defaults black supplied.","code":""},{"path":"https://walker-data.com/mapgl/reference/step_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a step expression — step_expr","text":"list representing step expression.","code":""},{"path":"https://walker-data.com/mapgl/reference/step_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a step expression — step_expr","text":"","code":"step_expr(     column = \"value\",     base = \"#ffffff\",     values = c(1000, 5000, 10000),     stops = c(\"#ff0000\", \"#00ff00\", \"#0000ff\") ) #> [[1]] #> [1] \"step\" #>  #> [[2]] #> [[2]][[1]] #> [1] \"get\" #>  #> [[2]][[2]] #> [1] \"value\" #>  #>  #> [[3]] #> [1] \"#ffffff\" #>  #> [[4]] #> [1] 1000 #>  #> [[5]] #> [1] \"#ff0000\" #>  #> [[6]] #> [1] 5000 #>  #> [[7]] #> [1] \"#00ff00\" #>  #> [[8]] #> [1] 10000 #>  #> [[9]] #> [1] \"#0000ff\" #>"},{"path":"https://walker-data.com/mapgl/reference/story_leaflet.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a scrollytelling story map with Leaflet — story_leaflet","title":"Create a scrollytelling story map with Leaflet — story_leaflet","text":"Create scrollytelling story map Leaflet","code":""},{"path":"https://walker-data.com/mapgl/reference/story_leaflet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a scrollytelling story map with Leaflet — story_leaflet","text":"","code":"story_leaflet(   map_id,   sections,   root_margin = \"-20% 0px -20% 0px\",   threshold = 0,   styles = NULL,   bg_color = \"rgba(255,255,255,0.9)\",   text_color = \"#34495e\",   font_family = NULL )"},{"path":"https://walker-data.com/mapgl/reference/story_leaflet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a scrollytelling story map with Leaflet — story_leaflet","text":"map_id ID mapboxgl, maplibre, leaflet output defined server, e.g. \"map\" sections named list story_section objects. Names correspond map events defined within server using on_section(). root_margin margin around viewport triggering sections intersection observer. specified string, e.g. \"-20% 0px -20% 0px\". threshold number indicates visibility ratio story '       panel used trigger section; number 0 1. Defaults 0, meaning section triggered soon first pixel visible. styles Optional custom CSS styles. specified character string within shiny::tags$style(). bg_color Default background color sections text_color Default text color sections font_family Default font family sections","code":""},{"path":"https://walker-data.com/mapgl/reference/story_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a scrollytelling story map — story_map","title":"Create a scrollytelling story map — story_map","text":"Create scrollytelling story map","code":""},{"path":"https://walker-data.com/mapgl/reference/story_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a scrollytelling story map — story_map","text":"","code":"story_map(   map_id,   sections,   map_type = c(\"mapboxgl\", \"maplibre\", \"leaflet\"),   root_margin = \"-20% 0px -20% 0px\",   threshold = 0,   styles = NULL,   bg_color = \"rgba(255,255,255,0.9)\",   text_color = \"#34495e\",   font_family = NULL )"},{"path":"https://walker-data.com/mapgl/reference/story_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a scrollytelling story map — story_map","text":"map_id ID mapboxgl, maplibre, leaflet output defined server, e.g. \"map\" sections named list story_section objects. Names correspond map events defined within server using on_section(). map_type One \"mapboxgl\", \"maplibre\", \"leaflet\". use either mapboxglOutput(), maplibreOutput(), leafletOutput() respectively, must correspond appropriate render*() function used server. root_margin margin around viewport triggering sections intersection observer. specified string, e.g. \"-20% 0px -20% 0px\". threshold number indicates visibility ratio story '       panel used trigger section; number 0 1. Defaults 0, meaning section triggered soon first pixel visible. styles Optional custom CSS styles. specified character string within shiny::tags$style(). bg_color Default background color sections text_color Default text color sections font_family Default font family sections","code":""},{"path":"https://walker-data.com/mapgl/reference/story_maplibre.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a scrollytelling story map with MapLibre — story_maplibre","title":"Create a scrollytelling story map with MapLibre — story_maplibre","text":"Create scrollytelling story map MapLibre","code":""},{"path":"https://walker-data.com/mapgl/reference/story_maplibre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a scrollytelling story map with MapLibre — story_maplibre","text":"","code":"story_maplibre(   map_id,   sections,   root_margin = \"-20% 0px -20% 0px\",   threshold = 0,   styles = NULL,   bg_color = \"rgba(255,255,255,0.9)\",   text_color = \"#34495e\",   font_family = NULL )"},{"path":"https://walker-data.com/mapgl/reference/story_maplibre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a scrollytelling story map with MapLibre — story_maplibre","text":"map_id ID mapboxgl, maplibre, leaflet output defined server, e.g. \"map\" sections named list story_section objects. Names correspond map events defined within server using on_section(). root_margin margin around viewport triggering sections intersection observer. specified string, e.g. \"-20% 0px -20% 0px\". threshold number indicates visibility ratio story '       panel used trigger section; number 0 1. Defaults 0, meaning section triggered soon first pixel visible. styles Optional custom CSS styles. specified character string within shiny::tags$style(). bg_color Default background color sections text_color Default text color sections font_family Default font family sections","code":""},{"path":"https://walker-data.com/mapgl/reference/story_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a story section for story maps — story_section","title":"Create a story section for story maps — story_section","text":"Create story section story maps","code":""},{"path":"https://walker-data.com/mapgl/reference/story_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a story section for story maps — story_section","text":"","code":"story_section(   title,   content,   position = c(\"left\", \"center\", \"right\"),   width = 400,   bg_color = NULL,   text_color = NULL,   font_family = NULL )"},{"path":"https://walker-data.com/mapgl/reference/story_section.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a story section for story maps — story_section","text":"title Section title content Section content - can text, HTML, Shiny outputs position Position text block (\"left\", \"center\", \"right\") width Width text block pixels (default: 400) bg_color Background color (alpha) text block text_color Text color font_family Font family section","code":""},{"path":"https://walker-data.com/mapgl/news/index.html","id":"mapgl-development-version","dir":"Changelog","previous_headings":"","what":"mapgl (development version)","title":"mapgl (development version)","text":"Added ability load existing features map sources draw control editing either initializing draw control via add_features_to_draw() Fixed vertex styling properly highlight selected vertices editing Extended draw control support compare views, enabling feature editing side--side map comparisons Improved compatibility Mapbox GL JS MapLibre GL JS Added proper source layer handling vector tiles using hover effects Now works correctly PMTiles vector tile sources include feature IDs Note: Vector tiles must include feature IDs hover effects work. GeoJSON sources automatically generate IDs. Tooltips can now use expressions dynamic content generation Use get_column() reference feature properties tooltips Added concat() helper function combining strings expressions Example: tooltip = concat(\"<strong>Name:<\/strong> \", get_column(\"name\"), \"<br>Value: \", get_column(\"value\")) Works regular tooltips set_tooltip() Shiny applications","code":""},{"path":"https://walker-data.com/mapgl/news/index.html","id":"mapgl-022","dir":"Changelog","previous_headings":"","what":"mapgl 0.2.2","title":"mapgl 0.2.2","text":"CRAN release: 2025-05-23 Added mapboxgl_view() maplibre_view() functions quick visualization sf objects automatic geometry detection column-based styling (#102). Added support rain snow effects Mapbox GL maps set_rain() set_snow() functions. Added add_globe_control() MapLibre maps, allowing users toggle “mercator” “globe” projections. Fixed issue set_style() Shiny applications Mapbox MapLibre maps (#99). Fixed namespacing issue get_drawn_features() Shiny modules (#95). Improved compare functionality better control support swiper color customization.","code":""},{"path":"https://walker-data.com/mapgl/news/index.html","id":"mapgl-021","dir":"Changelog","previous_headings":"","what":"mapgl 0.2.1","title":"mapgl 0.2.1","text":"CRAN release: 2025-03-18 Improved styling positioning behavior layers control. Users can now customize appearance layers control, layers control collapsed default cleaner appearance. Added ability link legends specific layers new layer_id parameter add_legend(). layer toggled layers control, associated legend automatically show hide. Added support custom legend positioning new margin parameters (margin_top, margin_right, margin_bottom, margin_left) allow fine-grained control legend placement. Fixed layers control toggle button state correctly reflect initial visibility layers, resolving issue layers set visibility = \"none\" showing active control. Support compare() plugin Shiny applications, new rendering proxy functions comparison apps Mapbox MapLibre. New mode parameter compare() allowing users choose \"swipe\" mode comparison slider, \"sync\" mode displays synchronized maps side--side. Updates throughout codebase allow features used comparison maps via Shiny proxy sessions.","code":""},{"path":"https://walker-data.com/mapgl/news/index.html","id":"mapgl-020","dir":"Changelog","previous_headings":"","what":"mapgl 0.2.0","title":"mapgl 0.2.0","text":"CRAN release: 2025-01-13 new “story map” feature allows users build interactive story maps. View story mapping vignette information. Various bug fixes performance improvements; visit package GitHub page details.","code":""},{"path":"https://walker-data.com/mapgl/news/index.html","id":"mapgl-014","dir":"Changelog","previous_headings":"","what":"mapgl 0.1.4","title":"mapgl 0.1.4","text":"CRAN release: 2024-11-01 add_image() allows add image map’s sprite use icon / symbol layer add_geolocate_control() adds Geolocate control map add_globe_minimap() adds mini globe overview map tracks map moves around globe Support multiple legends argument add = TRUE move_layer() function gives fine-grained control layer ordering Shiny session Various bug fixes performance improvements.","code":""},{"path":"https://walker-data.com/mapgl/news/index.html","id":"mapgl-013","dir":"Changelog","previous_headings":"","what":"mapgl 0.1.3","title":"mapgl 0.1.3","text":"CRAN release: 2024-09-04 Geocoding support Mapbox MapLibre maps added add_geocoder_control() Freehand draw support draw toolbar add_draw_control(freehand = TRUE) “reset view” control available add_reset_control() Circle clustering streamlined cluster_options() function, used cluster_options argument add_circle_layer() add_symbol_layer() Various bug fixes performance improvements.","code":""},{"path":"https://walker-data.com/mapgl/news/index.html","id":"mapgl-010","dir":"Changelog","previous_headings":"","what":"mapgl 0.1.0","title":"mapgl 0.1.0","text":"Initial release.","code":""}]
